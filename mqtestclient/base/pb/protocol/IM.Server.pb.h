// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Server.proto

#ifndef PROTOBUF_IM_2eServer_2eproto__INCLUDED
#define PROTOBUF_IM_2eServer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "IM.BaseDefine.pb.h"
// @@protoc_insertion_point(includes)

namespace IM {
namespace Server {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_IM_2eServer_2eproto();
void protobuf_AssignDesc_IM_2eServer_2eproto();
void protobuf_ShutdownFile_IM_2eServer_2eproto();

class IMStopReceivePacket;
class IMValidateReq;
class IMValidateRsp;
class IMGetDeviceTokenReq;
class IMGetDeviceTokenRsp;
class IMRoleSet;
class IMOnlineUserInfo;
class IMMsgServInfo;
class IMUserStatusUpdate;
class IMUserCntUpdate;
class IMServerKickUser;
class IMServerPCLoginStatusNotify;
class IMPushToUserReq;
class IMPushToUserRsp;
class IMGroupGetShieldReq;
class IMGroupGetShieldRsp;
class IMFileTransferReq;
class IMFileTransferRsp;
class IMFileServerIPReq;
class IMFileServerIPRsp;
class IMMsgServInfoReq;
class IMMsgServInfoRsp;
class IMUserLatestNickNameReq;
class IMUserLatestNickNameRsp;
class IMUserNickNameUpdate;

// ===================================================================

class IMStopReceivePacket : public ::google::protobuf::MessageLite {
 public:
  IMStopReceivePacket();
  virtual ~IMStopReceivePacket();

  IMStopReceivePacket(const IMStopReceivePacket& from);

  inline IMStopReceivePacket& operator=(const IMStopReceivePacket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMStopReceivePacket& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMStopReceivePacket* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMStopReceivePacket* other);

  // implements Message ----------------------------------------------

  IMStopReceivePacket* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMStopReceivePacket& from);
  void MergeFrom(const IMStopReceivePacket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Server.IMStopReceivePacket)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 result_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMStopReceivePacket* default_instance_;
};
// -------------------------------------------------------------------

class IMValidateReq : public ::google::protobuf::MessageLite {
 public:
  IMValidateReq();
  virtual ~IMValidateReq();

  IMValidateReq(const IMValidateReq& from);

  inline IMValidateReq& operator=(const IMValidateReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMValidateReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMValidateReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMValidateReq* other);

  // implements Message ----------------------------------------------

  IMValidateReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMValidateReq& from);
  void MergeFrom(const IMValidateReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);

  // required uint32 app_id = 2;
  inline bool has_app_id() const;
  inline void clear_app_id();
  static const int kAppIdFieldNumber = 2;
  inline ::google::protobuf::uint32 app_id() const;
  inline void set_app_id(::google::protobuf::uint32 value);

  // required uint32 domain_id = 3;
  inline bool has_domain_id() const;
  inline void clear_domain_id();
  static const int kDomainIdFieldNumber = 3;
  inline ::google::protobuf::uint32 domain_id() const;
  inline void set_domain_id(::google::protobuf::uint32 value);

  // required string user_token = 4;
  inline bool has_user_token() const;
  inline void clear_user_token();
  static const int kUserTokenFieldNumber = 4;
  inline const ::std::string& user_token() const;
  inline void set_user_token(const ::std::string& value);
  inline void set_user_token(const char* value);
  inline void set_user_token(const char* value, size_t size);
  inline ::std::string* mutable_user_token();
  inline ::std::string* release_user_token();
  inline void set_allocated_user_token(::std::string* user_token);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Server.IMValidateReq)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_app_id();
  inline void clear_has_app_id();
  inline void set_has_domain_id();
  inline void clear_has_domain_id();
  inline void set_has_user_token();
  inline void clear_has_user_token();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint32 app_id_;
  ::google::protobuf::uint32 domain_id_;
  ::std::string* user_token_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMValidateReq* default_instance_;
};
// -------------------------------------------------------------------

class IMValidateRsp : public ::google::protobuf::MessageLite {
 public:
  IMValidateRsp();
  virtual ~IMValidateRsp();

  IMValidateRsp(const IMValidateRsp& from);

  inline IMValidateRsp& operator=(const IMValidateRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMValidateRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMValidateRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMValidateRsp* other);

  // implements Message ----------------------------------------------

  IMValidateRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMValidateRsp& from);
  void MergeFrom(const IMValidateRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);

  // required uint32 app_id = 2;
  inline bool has_app_id() const;
  inline void clear_app_id();
  static const int kAppIdFieldNumber = 2;
  inline ::google::protobuf::uint32 app_id() const;
  inline void set_app_id(::google::protobuf::uint32 value);

  // required uint32 domain_id = 3;
  inline bool has_domain_id() const;
  inline void clear_domain_id();
  static const int kDomainIdFieldNumber = 3;
  inline ::google::protobuf::uint32 domain_id() const;
  inline void set_domain_id(::google::protobuf::uint32 value);

  // required uint32 result_code = 4;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 4;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // optional string result_string = 5;
  inline bool has_result_string() const;
  inline void clear_result_string();
  static const int kResultStringFieldNumber = 5;
  inline const ::std::string& result_string() const;
  inline void set_result_string(const ::std::string& value);
  inline void set_result_string(const char* value);
  inline void set_result_string(const char* value, size_t size);
  inline ::std::string* mutable_result_string();
  inline ::std::string* release_result_string();
  inline void set_allocated_result_string(::std::string* result_string);

  // optional .IM.BaseDefine.UserInfo user_info = 6;
  inline bool has_user_info() const;
  inline void clear_user_info();
  static const int kUserInfoFieldNumber = 6;
  inline const ::IM::BaseDefine::UserInfo& user_info() const;
  inline ::IM::BaseDefine::UserInfo* mutable_user_info();
  inline ::IM::BaseDefine::UserInfo* release_user_info();
  inline void set_allocated_user_info(::IM::BaseDefine::UserInfo* user_info);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Server.IMValidateRsp)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_app_id();
  inline void clear_has_app_id();
  inline void set_has_domain_id();
  inline void clear_has_domain_id();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_result_string();
  inline void clear_has_result_string();
  inline void set_has_user_info();
  inline void clear_has_user_info();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint32 app_id_;
  ::google::protobuf::uint32 domain_id_;
  ::std::string* result_string_;
  ::IM::BaseDefine::UserInfo* user_info_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 result_code_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMValidateRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMGetDeviceTokenReq : public ::google::protobuf::MessageLite {
 public:
  IMGetDeviceTokenReq();
  virtual ~IMGetDeviceTokenReq();

  IMGetDeviceTokenReq(const IMGetDeviceTokenReq& from);

  inline IMGetDeviceTokenReq& operator=(const IMGetDeviceTokenReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGetDeviceTokenReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGetDeviceTokenReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGetDeviceTokenReq* other);

  // implements Message ----------------------------------------------

  IMGetDeviceTokenReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGetDeviceTokenReq& from);
  void MergeFrom(const IMGetDeviceTokenReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 user_id = 1;
  inline int user_id_size() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id(int index) const;
  inline void set_user_id(int index, ::google::protobuf::uint64 value);
  inline void add_user_id(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      user_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_user_id();

  // optional uint32 domain_id = 2 [default = 1000];
  inline bool has_domain_id() const;
  inline void clear_domain_id();
  static const int kDomainIdFieldNumber = 2;
  inline ::google::protobuf::uint32 domain_id() const;
  inline void set_domain_id(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Server.IMGetDeviceTokenReq)
 private:
  inline void set_has_domain_id();
  inline void clear_has_domain_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > user_id_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 domain_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMGetDeviceTokenReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGetDeviceTokenRsp : public ::google::protobuf::MessageLite {
 public:
  IMGetDeviceTokenRsp();
  virtual ~IMGetDeviceTokenRsp();

  IMGetDeviceTokenRsp(const IMGetDeviceTokenRsp& from);

  inline IMGetDeviceTokenRsp& operator=(const IMGetDeviceTokenRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGetDeviceTokenRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGetDeviceTokenRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGetDeviceTokenRsp* other);

  // implements Message ----------------------------------------------

  IMGetDeviceTokenRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGetDeviceTokenRsp& from);
  void MergeFrom(const IMGetDeviceTokenRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IM.BaseDefine.UserTokenInfo user_token_info = 1;
  inline int user_token_info_size() const;
  inline void clear_user_token_info();
  static const int kUserTokenInfoFieldNumber = 1;
  inline const ::IM::BaseDefine::UserTokenInfo& user_token_info(int index) const;
  inline ::IM::BaseDefine::UserTokenInfo* mutable_user_token_info(int index);
  inline ::IM::BaseDefine::UserTokenInfo* add_user_token_info();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo >&
      user_token_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo >*
      mutable_user_token_info();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Server.IMGetDeviceTokenRsp)
 private:
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo > user_token_info_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMGetDeviceTokenRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMRoleSet : public ::google::protobuf::MessageLite {
 public:
  IMRoleSet();
  virtual ~IMRoleSet();

  IMRoleSet(const IMRoleSet& from);

  inline IMRoleSet& operator=(const IMRoleSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMRoleSet& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMRoleSet* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMRoleSet* other);

  // implements Message ----------------------------------------------

  IMRoleSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMRoleSet& from);
  void MergeFrom(const IMRoleSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 master = 1;
  inline bool has_master() const;
  inline void clear_master();
  static const int kMasterFieldNumber = 1;
  inline ::google::protobuf::uint32 master() const;
  inline void set_master(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Server.IMRoleSet)
 private:
  inline void set_has_master();
  inline void clear_has_master();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 master_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMRoleSet* default_instance_;
};
// -------------------------------------------------------------------

class IMOnlineUserInfo : public ::google::protobuf::MessageLite {
 public:
  IMOnlineUserInfo();
  virtual ~IMOnlineUserInfo();

  IMOnlineUserInfo(const IMOnlineUserInfo& from);

  inline IMOnlineUserInfo& operator=(const IMOnlineUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMOnlineUserInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMOnlineUserInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMOnlineUserInfo* other);

  // implements Message ----------------------------------------------

  IMOnlineUserInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMOnlineUserInfo& from);
  void MergeFrom(const IMOnlineUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IM.BaseDefine.ServerUserStat user_stat_list = 1;
  inline int user_stat_list_size() const;
  inline void clear_user_stat_list();
  static const int kUserStatListFieldNumber = 1;
  inline const ::IM::BaseDefine::ServerUserStat& user_stat_list(int index) const;
  inline ::IM::BaseDefine::ServerUserStat* mutable_user_stat_list(int index);
  inline ::IM::BaseDefine::ServerUserStat* add_user_stat_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::ServerUserStat >&
      user_stat_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::ServerUserStat >*
      mutable_user_stat_list();

  // @@protoc_insertion_point(class_scope:IM.Server.IMOnlineUserInfo)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::ServerUserStat > user_stat_list_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMOnlineUserInfo* default_instance_;
};
// -------------------------------------------------------------------

class IMMsgServInfo : public ::google::protobuf::MessageLite {
 public:
  IMMsgServInfo();
  virtual ~IMMsgServInfo();

  IMMsgServInfo(const IMMsgServInfo& from);

  inline IMMsgServInfo& operator=(const IMMsgServInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMMsgServInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMMsgServInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMMsgServInfo* other);

  // implements Message ----------------------------------------------

  IMMsgServInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMMsgServInfo& from);
  void MergeFrom(const IMMsgServInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ip1 = 1;
  inline bool has_ip1() const;
  inline void clear_ip1();
  static const int kIp1FieldNumber = 1;
  inline const ::std::string& ip1() const;
  inline void set_ip1(const ::std::string& value);
  inline void set_ip1(const char* value);
  inline void set_ip1(const char* value, size_t size);
  inline ::std::string* mutable_ip1();
  inline ::std::string* release_ip1();
  inline void set_allocated_ip1(::std::string* ip1);

  // required string ip2 = 2;
  inline bool has_ip2() const;
  inline void clear_ip2();
  static const int kIp2FieldNumber = 2;
  inline const ::std::string& ip2() const;
  inline void set_ip2(const ::std::string& value);
  inline void set_ip2(const char* value);
  inline void set_ip2(const char* value, size_t size);
  inline ::std::string* mutable_ip2();
  inline ::std::string* release_ip2();
  inline void set_allocated_ip2(::std::string* ip2);

  // required uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // required uint32 max_conn_cnt = 4;
  inline bool has_max_conn_cnt() const;
  inline void clear_max_conn_cnt();
  static const int kMaxConnCntFieldNumber = 4;
  inline ::google::protobuf::uint32 max_conn_cnt() const;
  inline void set_max_conn_cnt(::google::protobuf::uint32 value);

  // required uint32 cur_conn_cnt = 5;
  inline bool has_cur_conn_cnt() const;
  inline void clear_cur_conn_cnt();
  static const int kCurConnCntFieldNumber = 5;
  inline ::google::protobuf::uint32 cur_conn_cnt() const;
  inline void set_cur_conn_cnt(::google::protobuf::uint32 value);

  // required string host_name = 6;
  inline bool has_host_name() const;
  inline void clear_host_name();
  static const int kHostNameFieldNumber = 6;
  inline const ::std::string& host_name() const;
  inline void set_host_name(const ::std::string& value);
  inline void set_host_name(const char* value);
  inline void set_host_name(const char* value, size_t size);
  inline ::std::string* mutable_host_name();
  inline ::std::string* release_host_name();
  inline void set_allocated_host_name(::std::string* host_name);

  // required uint32 portWss = 7;
  inline bool has_portwss() const;
  inline void clear_portwss();
  static const int kPortWssFieldNumber = 7;
  inline ::google::protobuf::uint32 portwss() const;
  inline void set_portwss(::google::protobuf::uint32 value);

  // required string ipWss = 8;
  inline bool has_ipwss() const;
  inline void clear_ipwss();
  static const int kIpWssFieldNumber = 8;
  inline const ::std::string& ipwss() const;
  inline void set_ipwss(const ::std::string& value);
  inline void set_ipwss(const char* value);
  inline void set_ipwss(const char* value, size_t size);
  inline ::std::string* mutable_ipwss();
  inline ::std::string* release_ipwss();
  inline void set_allocated_ipwss(::std::string* ipwss);

  // @@protoc_insertion_point(class_scope:IM.Server.IMMsgServInfo)
 private:
  inline void set_has_ip1();
  inline void clear_has_ip1();
  inline void set_has_ip2();
  inline void clear_has_ip2();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_max_conn_cnt();
  inline void clear_has_max_conn_cnt();
  inline void set_has_cur_conn_cnt();
  inline void clear_has_cur_conn_cnt();
  inline void set_has_host_name();
  inline void clear_has_host_name();
  inline void set_has_portwss();
  inline void clear_has_portwss();
  inline void set_has_ipwss();
  inline void clear_has_ipwss();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip1_;
  ::std::string* ip2_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint32 max_conn_cnt_;
  ::std::string* host_name_;
  ::google::protobuf::uint32 cur_conn_cnt_;
  ::google::protobuf::uint32 portwss_;
  ::std::string* ipwss_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMMsgServInfo* default_instance_;
};
// -------------------------------------------------------------------

class IMUserStatusUpdate : public ::google::protobuf::MessageLite {
 public:
  IMUserStatusUpdate();
  virtual ~IMUserStatusUpdate();

  IMUserStatusUpdate(const IMUserStatusUpdate& from);

  inline IMUserStatusUpdate& operator=(const IMUserStatusUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMUserStatusUpdate& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMUserStatusUpdate* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMUserStatusUpdate* other);

  // implements Message ----------------------------------------------

  IMUserStatusUpdate* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMUserStatusUpdate& from);
  void MergeFrom(const IMUserStatusUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_status = 1;
  inline bool has_user_status() const;
  inline void clear_user_status();
  static const int kUserStatusFieldNumber = 1;
  inline ::google::protobuf::uint32 user_status() const;
  inline void set_user_status(::google::protobuf::uint32 value);

  // required uint64 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);

  // required uint32 app_id = 3;
  inline bool has_app_id() const;
  inline void clear_app_id();
  static const int kAppIdFieldNumber = 3;
  inline ::google::protobuf::uint32 app_id() const;
  inline void set_app_id(::google::protobuf::uint32 value);

  // required uint32 domain_id = 4;
  inline bool has_domain_id() const;
  inline void clear_domain_id();
  static const int kDomainIdFieldNumber = 4;
  inline ::google::protobuf::uint32 domain_id() const;
  inline void set_domain_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Server.IMUserStatusUpdate)
 private:
  inline void set_has_user_status();
  inline void clear_has_user_status();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_app_id();
  inline void clear_has_app_id();
  inline void set_has_domain_id();
  inline void clear_has_domain_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint32 user_status_;
  ::google::protobuf::uint32 app_id_;
  ::google::protobuf::uint32 domain_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMUserStatusUpdate* default_instance_;
};
// -------------------------------------------------------------------

class IMUserCntUpdate : public ::google::protobuf::MessageLite {
 public:
  IMUserCntUpdate();
  virtual ~IMUserCntUpdate();

  IMUserCntUpdate(const IMUserCntUpdate& from);

  inline IMUserCntUpdate& operator=(const IMUserCntUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMUserCntUpdate& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMUserCntUpdate* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMUserCntUpdate* other);

  // implements Message ----------------------------------------------

  IMUserCntUpdate* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMUserCntUpdate& from);
  void MergeFrom(const IMUserCntUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_action = 1;
  inline bool has_user_action() const;
  inline void clear_user_action();
  static const int kUserActionFieldNumber = 1;
  inline ::google::protobuf::uint32 user_action() const;
  inline void set_user_action(::google::protobuf::uint32 value);

  // required uint64 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:IM.Server.IMUserCntUpdate)
 private:
  inline void set_has_user_action();
  inline void clear_has_user_action();
  inline void set_has_user_id();
  inline void clear_has_user_id();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint32 user_action_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMUserCntUpdate* default_instance_;
};
// -------------------------------------------------------------------

class IMServerKickUser : public ::google::protobuf::MessageLite {
 public:
  IMServerKickUser();
  virtual ~IMServerKickUser();

  IMServerKickUser(const IMServerKickUser& from);

  inline IMServerKickUser& operator=(const IMServerKickUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMServerKickUser& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMServerKickUser* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMServerKickUser* other);

  // implements Message ----------------------------------------------

  IMServerKickUser* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMServerKickUser& from);
  void MergeFrom(const IMServerKickUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);

  // required uint32 app_id = 2;
  inline bool has_app_id() const;
  inline void clear_app_id();
  static const int kAppIdFieldNumber = 2;
  inline ::google::protobuf::uint32 app_id() const;
  inline void set_app_id(::google::protobuf::uint32 value);

  // required uint32 domain_id = 3;
  inline bool has_domain_id() const;
  inline void clear_domain_id();
  static const int kDomainIdFieldNumber = 3;
  inline ::google::protobuf::uint32 domain_id() const;
  inline void set_domain_id(::google::protobuf::uint32 value);

  // required uint32 reason = 4;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 4;
  inline ::google::protobuf::uint32 reason() const;
  inline void set_reason(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Server.IMServerKickUser)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_app_id();
  inline void clear_has_app_id();
  inline void set_has_domain_id();
  inline void clear_has_domain_id();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint32 app_id_;
  ::google::protobuf::uint32 domain_id_;
  ::google::protobuf::uint32 reason_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMServerKickUser* default_instance_;
};
// -------------------------------------------------------------------

class IMServerPCLoginStatusNotify : public ::google::protobuf::MessageLite {
 public:
  IMServerPCLoginStatusNotify();
  virtual ~IMServerPCLoginStatusNotify();

  IMServerPCLoginStatusNotify(const IMServerPCLoginStatusNotify& from);

  inline IMServerPCLoginStatusNotify& operator=(const IMServerPCLoginStatusNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMServerPCLoginStatusNotify& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMServerPCLoginStatusNotify* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMServerPCLoginStatusNotify* other);

  // implements Message ----------------------------------------------

  IMServerPCLoginStatusNotify* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMServerPCLoginStatusNotify& from);
  void MergeFrom(const IMServerPCLoginStatusNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);

  // required uint32 login_status = 2;
  inline bool has_login_status() const;
  inline void clear_login_status();
  static const int kLoginStatusFieldNumber = 2;
  inline ::google::protobuf::uint32 login_status() const;
  inline void set_login_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Server.IMServerPCLoginStatusNotify)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_login_status();
  inline void clear_has_login_status();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint32 login_status_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMServerPCLoginStatusNotify* default_instance_;
};
// -------------------------------------------------------------------

class IMPushToUserReq : public ::google::protobuf::MessageLite {
 public:
  IMPushToUserReq();
  virtual ~IMPushToUserReq();

  IMPushToUserReq(const IMPushToUserReq& from);

  inline IMPushToUserReq& operator=(const IMPushToUserReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMPushToUserReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMPushToUserReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMPushToUserReq* other);

  // implements Message ----------------------------------------------

  IMPushToUserReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMPushToUserReq& from);
  void MergeFrom(const IMPushToUserReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string flash = 1;
  inline bool has_flash() const;
  inline void clear_flash();
  static const int kFlashFieldNumber = 1;
  inline const ::std::string& flash() const;
  inline void set_flash(const ::std::string& value);
  inline void set_flash(const char* value);
  inline void set_flash(const char* value, size_t size);
  inline ::std::string* mutable_flash();
  inline ::std::string* release_flash();
  inline void set_allocated_flash(::std::string* flash);

  // required string data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // required uint64 to_session_id = 3;
  inline bool has_to_session_id() const;
  inline void clear_to_session_id();
  static const int kToSessionIdFieldNumber = 3;
  inline ::google::protobuf::uint64 to_session_id() const;
  inline void set_to_session_id(::google::protobuf::uint64 value);

  // required .IM.BaseDefine.SessionType session_type = 4;
  inline bool has_session_type() const;
  inline void clear_session_type();
  static const int kSessionTypeFieldNumber = 4;
  inline ::IM::BaseDefine::SessionType session_type() const;
  inline void set_session_type(::IM::BaseDefine::SessionType value);

  // repeated .IM.BaseDefine.UserTokenInfo user_token_list = 5;
  inline int user_token_list_size() const;
  inline void clear_user_token_list();
  static const int kUserTokenListFieldNumber = 5;
  inline const ::IM::BaseDefine::UserTokenInfo& user_token_list(int index) const;
  inline ::IM::BaseDefine::UserTokenInfo* mutable_user_token_list(int index);
  inline ::IM::BaseDefine::UserTokenInfo* add_user_token_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo >&
      user_token_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo >*
      mutable_user_token_list();

  // @@protoc_insertion_point(class_scope:IM.Server.IMPushToUserReq)
 private:
  inline void set_has_flash();
  inline void clear_has_flash();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_to_session_id();
  inline void clear_has_to_session_id();
  inline void set_has_session_type();
  inline void clear_has_session_type();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* flash_;
  ::std::string* data_;
  ::google::protobuf::uint64 to_session_id_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo > user_token_list_;
  int session_type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMPushToUserReq* default_instance_;
};
// -------------------------------------------------------------------

class IMPushToUserRsp : public ::google::protobuf::MessageLite {
 public:
  IMPushToUserRsp();
  virtual ~IMPushToUserRsp();

  IMPushToUserRsp(const IMPushToUserRsp& from);

  inline IMPushToUserRsp& operator=(const IMPushToUserRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMPushToUserRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMPushToUserRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMPushToUserRsp* other);

  // implements Message ----------------------------------------------

  IMPushToUserRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMPushToUserRsp& from);
  void MergeFrom(const IMPushToUserRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IM.BaseDefine.PushResult push_result_list = 1;
  inline int push_result_list_size() const;
  inline void clear_push_result_list();
  static const int kPushResultListFieldNumber = 1;
  inline const ::IM::BaseDefine::PushResult& push_result_list(int index) const;
  inline ::IM::BaseDefine::PushResult* mutable_push_result_list(int index);
  inline ::IM::BaseDefine::PushResult* add_push_result_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::PushResult >&
      push_result_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::PushResult >*
      mutable_push_result_list();

  // @@protoc_insertion_point(class_scope:IM.Server.IMPushToUserRsp)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::PushResult > push_result_list_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMPushToUserRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupGetShieldReq : public ::google::protobuf::MessageLite {
 public:
  IMGroupGetShieldReq();
  virtual ~IMGroupGetShieldReq();

  IMGroupGetShieldReq(const IMGroupGetShieldReq& from);

  inline IMGroupGetShieldReq& operator=(const IMGroupGetShieldReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupGetShieldReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupGetShieldReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupGetShieldReq* other);

  // implements Message ----------------------------------------------

  IMGroupGetShieldReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupGetShieldReq& from);
  void MergeFrom(const IMGroupGetShieldReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // repeated uint64 user_id = 2;
  inline int user_id_size() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint64 user_id(int index) const;
  inline void set_user_id(int index, ::google::protobuf::uint64 value);
  inline void add_user_id(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      user_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_user_id();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Server.IMGroupGetShieldReq)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > user_id_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 group_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMGroupGetShieldReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGroupGetShieldRsp : public ::google::protobuf::MessageLite {
 public:
  IMGroupGetShieldRsp();
  virtual ~IMGroupGetShieldRsp();

  IMGroupGetShieldRsp(const IMGroupGetShieldRsp& from);

  inline IMGroupGetShieldRsp& operator=(const IMGroupGetShieldRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMGroupGetShieldRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMGroupGetShieldRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMGroupGetShieldRsp* other);

  // implements Message ----------------------------------------------

  IMGroupGetShieldRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGroupGetShieldRsp& from);
  void MergeFrom(const IMGroupGetShieldRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // repeated .IM.BaseDefine.ShieldStatus shield_status_list = 2;
  inline int shield_status_list_size() const;
  inline void clear_shield_status_list();
  static const int kShieldStatusListFieldNumber = 2;
  inline const ::IM::BaseDefine::ShieldStatus& shield_status_list(int index) const;
  inline ::IM::BaseDefine::ShieldStatus* mutable_shield_status_list(int index);
  inline ::IM::BaseDefine::ShieldStatus* add_shield_status_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::ShieldStatus >&
      shield_status_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::ShieldStatus >*
      mutable_shield_status_list();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Server.IMGroupGetShieldRsp)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::ShieldStatus > shield_status_list_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 group_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMGroupGetShieldRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMFileTransferReq : public ::google::protobuf::MessageLite {
 public:
  IMFileTransferReq();
  virtual ~IMFileTransferReq();

  IMFileTransferReq(const IMFileTransferReq& from);

  inline IMFileTransferReq& operator=(const IMFileTransferReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMFileTransferReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMFileTransferReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMFileTransferReq* other);

  // implements Message ----------------------------------------------

  IMFileTransferReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMFileTransferReq& from);
  void MergeFrom(const IMFileTransferReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 from_user_id = 1;
  inline bool has_from_user_id() const;
  inline void clear_from_user_id();
  static const int kFromUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 from_user_id() const;
  inline void set_from_user_id(::google::protobuf::uint64 value);

  // required uint64 to_user_id = 2;
  inline bool has_to_user_id() const;
  inline void clear_to_user_id();
  static const int kToUserIdFieldNumber = 2;
  inline ::google::protobuf::uint64 to_user_id() const;
  inline void set_to_user_id(::google::protobuf::uint64 value);

  // required string file_name = 3;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 3;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const char* value, size_t size);
  inline ::std::string* mutable_file_name();
  inline ::std::string* release_file_name();
  inline void set_allocated_file_name(::std::string* file_name);

  // required uint32 file_size = 4;
  inline bool has_file_size() const;
  inline void clear_file_size();
  static const int kFileSizeFieldNumber = 4;
  inline ::google::protobuf::uint32 file_size() const;
  inline void set_file_size(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.TransferFileType trans_mode = 5;
  inline bool has_trans_mode() const;
  inline void clear_trans_mode();
  static const int kTransModeFieldNumber = 5;
  inline ::IM::BaseDefine::TransferFileType trans_mode() const;
  inline void set_trans_mode(::IM::BaseDefine::TransferFileType value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Server.IMFileTransferReq)
 private:
  inline void set_has_from_user_id();
  inline void clear_has_from_user_id();
  inline void set_has_to_user_id();
  inline void clear_has_to_user_id();
  inline void set_has_file_name();
  inline void clear_has_file_name();
  inline void set_has_file_size();
  inline void clear_has_file_size();
  inline void set_has_trans_mode();
  inline void clear_has_trans_mode();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 from_user_id_;
  ::google::protobuf::uint64 to_user_id_;
  ::std::string* file_name_;
  ::google::protobuf::uint32 file_size_;
  int trans_mode_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMFileTransferReq* default_instance_;
};
// -------------------------------------------------------------------

class IMFileTransferRsp : public ::google::protobuf::MessageLite {
 public:
  IMFileTransferRsp();
  virtual ~IMFileTransferRsp();

  IMFileTransferRsp(const IMFileTransferRsp& from);

  inline IMFileTransferRsp& operator=(const IMFileTransferRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMFileTransferRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMFileTransferRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMFileTransferRsp* other);

  // implements Message ----------------------------------------------

  IMFileTransferRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMFileTransferRsp& from);
  void MergeFrom(const IMFileTransferRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 result_code = 1;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // required uint64 from_user_id = 2;
  inline bool has_from_user_id() const;
  inline void clear_from_user_id();
  static const int kFromUserIdFieldNumber = 2;
  inline ::google::protobuf::uint64 from_user_id() const;
  inline void set_from_user_id(::google::protobuf::uint64 value);

  // required uint64 to_user_id = 3;
  inline bool has_to_user_id() const;
  inline void clear_to_user_id();
  static const int kToUserIdFieldNumber = 3;
  inline ::google::protobuf::uint64 to_user_id() const;
  inline void set_to_user_id(::google::protobuf::uint64 value);

  // optional string file_name = 4;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 4;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const char* value, size_t size);
  inline ::std::string* mutable_file_name();
  inline ::std::string* release_file_name();
  inline void set_allocated_file_name(::std::string* file_name);

  // optional uint32 file_size = 5;
  inline bool has_file_size() const;
  inline void clear_file_size();
  static const int kFileSizeFieldNumber = 5;
  inline ::google::protobuf::uint32 file_size() const;
  inline void set_file_size(::google::protobuf::uint32 value);

  // optional string task_id = 6;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 6;
  inline const ::std::string& task_id() const;
  inline void set_task_id(const ::std::string& value);
  inline void set_task_id(const char* value);
  inline void set_task_id(const char* value, size_t size);
  inline ::std::string* mutable_task_id();
  inline ::std::string* release_task_id();
  inline void set_allocated_task_id(::std::string* task_id);

  // optional .IM.BaseDefine.TransferFileType trans_mode = 7;
  inline bool has_trans_mode() const;
  inline void clear_trans_mode();
  static const int kTransModeFieldNumber = 7;
  inline ::IM::BaseDefine::TransferFileType trans_mode() const;
  inline void set_trans_mode(::IM::BaseDefine::TransferFileType value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Server.IMFileTransferRsp)
 private:
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_from_user_id();
  inline void clear_has_from_user_id();
  inline void set_has_to_user_id();
  inline void clear_has_to_user_id();
  inline void set_has_file_name();
  inline void clear_has_file_name();
  inline void set_has_file_size();
  inline void clear_has_file_size();
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_trans_mode();
  inline void clear_has_trans_mode();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 from_user_id_;
  ::google::protobuf::uint64 to_user_id_;
  ::google::protobuf::uint32 result_code_;
  ::google::protobuf::uint32 file_size_;
  ::std::string* file_name_;
  ::std::string* task_id_;
  ::std::string* attach_data_;
  int trans_mode_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMFileTransferRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMFileServerIPReq : public ::google::protobuf::MessageLite {
 public:
  IMFileServerIPReq();
  virtual ~IMFileServerIPReq();

  IMFileServerIPReq(const IMFileServerIPReq& from);

  inline IMFileServerIPReq& operator=(const IMFileServerIPReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMFileServerIPReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMFileServerIPReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMFileServerIPReq* other);

  // implements Message ----------------------------------------------

  IMFileServerIPReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMFileServerIPReq& from);
  void MergeFrom(const IMFileServerIPReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IM.Server.IMFileServerIPReq)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMFileServerIPReq* default_instance_;
};
// -------------------------------------------------------------------

class IMFileServerIPRsp : public ::google::protobuf::MessageLite {
 public:
  IMFileServerIPRsp();
  virtual ~IMFileServerIPRsp();

  IMFileServerIPRsp(const IMFileServerIPRsp& from);

  inline IMFileServerIPRsp& operator=(const IMFileServerIPRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMFileServerIPRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMFileServerIPRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMFileServerIPRsp* other);

  // implements Message ----------------------------------------------

  IMFileServerIPRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMFileServerIPRsp& from);
  void MergeFrom(const IMFileServerIPRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IM.BaseDefine.IpAddr ip_addr_list = 1;
  inline int ip_addr_list_size() const;
  inline void clear_ip_addr_list();
  static const int kIpAddrListFieldNumber = 1;
  inline const ::IM::BaseDefine::IpAddr& ip_addr_list(int index) const;
  inline ::IM::BaseDefine::IpAddr* mutable_ip_addr_list(int index);
  inline ::IM::BaseDefine::IpAddr* add_ip_addr_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::IpAddr >&
      ip_addr_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::IpAddr >*
      mutable_ip_addr_list();

  // @@protoc_insertion_point(class_scope:IM.Server.IMFileServerIPRsp)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::IpAddr > ip_addr_list_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMFileServerIPRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMMsgServInfoReq : public ::google::protobuf::MessageLite {
 public:
  IMMsgServInfoReq();
  virtual ~IMMsgServInfoReq();

  IMMsgServInfoReq(const IMMsgServInfoReq& from);

  inline IMMsgServInfoReq& operator=(const IMMsgServInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMMsgServInfoReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMMsgServInfoReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMMsgServInfoReq* other);

  // implements Message ----------------------------------------------

  IMMsgServInfoReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMMsgServInfoReq& from);
  void MergeFrom(const IMMsgServInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 time_stamp = 1;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 1;
  inline ::google::protobuf::uint32 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Server.IMMsgServInfoReq)
 private:
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 time_stamp_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMMsgServInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class IMMsgServInfoRsp : public ::google::protobuf::MessageLite {
 public:
  IMMsgServInfoRsp();
  virtual ~IMMsgServInfoRsp();

  IMMsgServInfoRsp(const IMMsgServInfoRsp& from);

  inline IMMsgServInfoRsp& operator=(const IMMsgServInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMMsgServInfoRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMMsgServInfoRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMMsgServInfoRsp* other);

  // implements Message ----------------------------------------------

  IMMsgServInfoRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMMsgServInfoRsp& from);
  void MergeFrom(const IMMsgServInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 time_stamp = 1;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 1;
  inline ::google::protobuf::uint32 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint32 value);

  // required .IM.Server.IMMsgServInfo msg_serv_info = 2;
  inline bool has_msg_serv_info() const;
  inline void clear_msg_serv_info();
  static const int kMsgServInfoFieldNumber = 2;
  inline const ::IM::Server::IMMsgServInfo& msg_serv_info() const;
  inline ::IM::Server::IMMsgServInfo* mutable_msg_serv_info();
  inline ::IM::Server::IMMsgServInfo* release_msg_serv_info();
  inline void set_allocated_msg_serv_info(::IM::Server::IMMsgServInfo* msg_serv_info);

  // @@protoc_insertion_point(class_scope:IM.Server.IMMsgServInfoRsp)
 private:
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();
  inline void set_has_msg_serv_info();
  inline void clear_has_msg_serv_info();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::IM::Server::IMMsgServInfo* msg_serv_info_;
  ::google::protobuf::uint32 time_stamp_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMMsgServInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMUserLatestNickNameReq : public ::google::protobuf::MessageLite {
 public:
  IMUserLatestNickNameReq();
  virtual ~IMUserLatestNickNameReq();

  IMUserLatestNickNameReq(const IMUserLatestNickNameReq& from);

  inline IMUserLatestNickNameReq& operator=(const IMUserLatestNickNameReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMUserLatestNickNameReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMUserLatestNickNameReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMUserLatestNickNameReq* other);

  // implements Message ----------------------------------------------

  IMUserLatestNickNameReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMUserLatestNickNameReq& from);
  void MergeFrom(const IMUserLatestNickNameReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);

  // required uint32 app_id = 2;
  inline bool has_app_id() const;
  inline void clear_app_id();
  static const int kAppIdFieldNumber = 2;
  inline ::google::protobuf::uint32 app_id() const;
  inline void set_app_id(::google::protobuf::uint32 value);

  // required uint32 domain_id = 3;
  inline bool has_domain_id() const;
  inline void clear_domain_id();
  static const int kDomainIdFieldNumber = 3;
  inline ::google::protobuf::uint32 domain_id() const;
  inline void set_domain_id(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Server.IMUserLatestNickNameReq)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_app_id();
  inline void clear_has_app_id();
  inline void set_has_domain_id();
  inline void clear_has_domain_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint32 app_id_;
  ::google::protobuf::uint32 domain_id_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMUserLatestNickNameReq* default_instance_;
};
// -------------------------------------------------------------------

class IMUserLatestNickNameRsp : public ::google::protobuf::MessageLite {
 public:
  IMUserLatestNickNameRsp();
  virtual ~IMUserLatestNickNameRsp();

  IMUserLatestNickNameRsp(const IMUserLatestNickNameRsp& from);

  inline IMUserLatestNickNameRsp& operator=(const IMUserLatestNickNameRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMUserLatestNickNameRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMUserLatestNickNameRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMUserLatestNickNameRsp* other);

  // implements Message ----------------------------------------------

  IMUserLatestNickNameRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMUserLatestNickNameRsp& from);
  void MergeFrom(const IMUserLatestNickNameRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);

  // required uint32 app_id = 2;
  inline bool has_app_id() const;
  inline void clear_app_id();
  static const int kAppIdFieldNumber = 2;
  inline ::google::protobuf::uint32 app_id() const;
  inline void set_app_id(::google::protobuf::uint32 value);

  // required uint32 domain_id = 3;
  inline bool has_domain_id() const;
  inline void clear_domain_id();
  static const int kDomainIdFieldNumber = 3;
  inline ::google::protobuf::uint32 domain_id() const;
  inline void set_domain_id(::google::protobuf::uint32 value);

  // required string nick_name = 4;
  inline bool has_nick_name() const;
  inline void clear_nick_name();
  static const int kNickNameFieldNumber = 4;
  inline const ::std::string& nick_name() const;
  inline void set_nick_name(const ::std::string& value);
  inline void set_nick_name(const char* value);
  inline void set_nick_name(const char* value, size_t size);
  inline ::std::string* mutable_nick_name();
  inline ::std::string* release_nick_name();
  inline void set_allocated_nick_name(::std::string* nick_name);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Server.IMUserLatestNickNameRsp)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_app_id();
  inline void clear_has_app_id();
  inline void set_has_domain_id();
  inline void clear_has_domain_id();
  inline void set_has_nick_name();
  inline void clear_has_nick_name();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint32 app_id_;
  ::google::protobuf::uint32 domain_id_;
  ::std::string* nick_name_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMUserLatestNickNameRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMUserNickNameUpdate : public ::google::protobuf::MessageLite {
 public:
  IMUserNickNameUpdate();
  virtual ~IMUserNickNameUpdate();

  IMUserNickNameUpdate(const IMUserNickNameUpdate& from);

  inline IMUserNickNameUpdate& operator=(const IMUserNickNameUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMUserNickNameUpdate& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMUserNickNameUpdate* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMUserNickNameUpdate* other);

  // implements Message ----------------------------------------------

  IMUserNickNameUpdate* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMUserNickNameUpdate& from);
  void MergeFrom(const IMUserNickNameUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);

  // required uint32 app_id = 2;
  inline bool has_app_id() const;
  inline void clear_app_id();
  static const int kAppIdFieldNumber = 2;
  inline ::google::protobuf::uint32 app_id() const;
  inline void set_app_id(::google::protobuf::uint32 value);

  // required uint32 domain_id = 3;
  inline bool has_domain_id() const;
  inline void clear_domain_id();
  static const int kDomainIdFieldNumber = 3;
  inline ::google::protobuf::uint32 domain_id() const;
  inline void set_domain_id(::google::protobuf::uint32 value);

  // required string nick_name = 4;
  inline bool has_nick_name() const;
  inline void clear_nick_name();
  static const int kNickNameFieldNumber = 4;
  inline const ::std::string& nick_name() const;
  inline void set_nick_name(const ::std::string& value);
  inline void set_nick_name(const char* value);
  inline void set_nick_name(const char* value, size_t size);
  inline ::std::string* mutable_nick_name();
  inline ::std::string* release_nick_name();
  inline void set_allocated_nick_name(::std::string* nick_name);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Server.IMUserNickNameUpdate)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_app_id();
  inline void clear_has_app_id();
  inline void set_has_domain_id();
  inline void clear_has_domain_id();
  inline void set_has_nick_name();
  inline void clear_has_nick_name();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint32 app_id_;
  ::google::protobuf::uint32 domain_id_;
  ::std::string* nick_name_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eServer_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eServer_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eServer_2eproto();
  friend void protobuf_ShutdownFile_IM_2eServer_2eproto();

  void InitAsDefaultInstance();
  static IMUserNickNameUpdate* default_instance_;
};
// ===================================================================


// ===================================================================

// IMStopReceivePacket

// required uint32 result = 1;
inline bool IMStopReceivePacket::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMStopReceivePacket::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMStopReceivePacket::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMStopReceivePacket::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 IMStopReceivePacket::result() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMStopReceivePacket.result)
  return result_;
}
inline void IMStopReceivePacket::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMStopReceivePacket.result)
}

// -------------------------------------------------------------------

// IMValidateReq

// required uint64 user_id = 1;
inline bool IMValidateReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMValidateReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMValidateReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMValidateReq::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 IMValidateReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMValidateReq.user_id)
  return user_id_;
}
inline void IMValidateReq::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMValidateReq.user_id)
}

// required uint32 app_id = 2;
inline bool IMValidateReq::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMValidateReq::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMValidateReq::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMValidateReq::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
inline ::google::protobuf::uint32 IMValidateReq::app_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMValidateReq.app_id)
  return app_id_;
}
inline void IMValidateReq::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMValidateReq.app_id)
}

// required uint32 domain_id = 3;
inline bool IMValidateReq::has_domain_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMValidateReq::set_has_domain_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMValidateReq::clear_has_domain_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMValidateReq::clear_domain_id() {
  domain_id_ = 0u;
  clear_has_domain_id();
}
inline ::google::protobuf::uint32 IMValidateReq::domain_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMValidateReq.domain_id)
  return domain_id_;
}
inline void IMValidateReq::set_domain_id(::google::protobuf::uint32 value) {
  set_has_domain_id();
  domain_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMValidateReq.domain_id)
}

// required string user_token = 4;
inline bool IMValidateReq::has_user_token() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMValidateReq::set_has_user_token() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMValidateReq::clear_has_user_token() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMValidateReq::clear_user_token() {
  if (user_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_token_->clear();
  }
  clear_has_user_token();
}
inline const ::std::string& IMValidateReq::user_token() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMValidateReq.user_token)
  return *user_token_;
}
inline void IMValidateReq::set_user_token(const ::std::string& value) {
  set_has_user_token();
  if (user_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_token_ = new ::std::string;
  }
  user_token_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMValidateReq.user_token)
}
inline void IMValidateReq::set_user_token(const char* value) {
  set_has_user_token();
  if (user_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_token_ = new ::std::string;
  }
  user_token_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMValidateReq.user_token)
}
inline void IMValidateReq::set_user_token(const char* value, size_t size) {
  set_has_user_token();
  if (user_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_token_ = new ::std::string;
  }
  user_token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMValidateReq.user_token)
}
inline ::std::string* IMValidateReq::mutable_user_token() {
  set_has_user_token();
  if (user_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMValidateReq.user_token)
  return user_token_;
}
inline ::std::string* IMValidateReq::release_user_token() {
  clear_has_user_token();
  if (user_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_token_;
    user_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMValidateReq::set_allocated_user_token(::std::string* user_token) {
  if (user_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_token_;
  }
  if (user_token) {
    set_has_user_token();
    user_token_ = user_token;
  } else {
    clear_has_user_token();
    user_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMValidateReq.user_token)
}

// optional bytes attach_data = 20;
inline bool IMValidateReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMValidateReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMValidateReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMValidateReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMValidateReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMValidateReq.attach_data)
  return *attach_data_;
}
inline void IMValidateReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMValidateReq.attach_data)
}
inline void IMValidateReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMValidateReq.attach_data)
}
inline void IMValidateReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMValidateReq.attach_data)
}
inline ::std::string* IMValidateReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMValidateReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMValidateReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMValidateReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMValidateReq.attach_data)
}

// -------------------------------------------------------------------

// IMValidateRsp

// required uint64 user_id = 1;
inline bool IMValidateRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMValidateRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMValidateRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMValidateRsp::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 IMValidateRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMValidateRsp.user_id)
  return user_id_;
}
inline void IMValidateRsp::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMValidateRsp.user_id)
}

// required uint32 app_id = 2;
inline bool IMValidateRsp::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMValidateRsp::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMValidateRsp::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMValidateRsp::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
inline ::google::protobuf::uint32 IMValidateRsp::app_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMValidateRsp.app_id)
  return app_id_;
}
inline void IMValidateRsp::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMValidateRsp.app_id)
}

// required uint32 domain_id = 3;
inline bool IMValidateRsp::has_domain_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMValidateRsp::set_has_domain_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMValidateRsp::clear_has_domain_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMValidateRsp::clear_domain_id() {
  domain_id_ = 0u;
  clear_has_domain_id();
}
inline ::google::protobuf::uint32 IMValidateRsp::domain_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMValidateRsp.domain_id)
  return domain_id_;
}
inline void IMValidateRsp::set_domain_id(::google::protobuf::uint32 value) {
  set_has_domain_id();
  domain_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMValidateRsp.domain_id)
}

// required uint32 result_code = 4;
inline bool IMValidateRsp::has_result_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMValidateRsp::set_has_result_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMValidateRsp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMValidateRsp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMValidateRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMValidateRsp.result_code)
  return result_code_;
}
inline void IMValidateRsp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMValidateRsp.result_code)
}

// optional string result_string = 5;
inline bool IMValidateRsp::has_result_string() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMValidateRsp::set_has_result_string() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMValidateRsp::clear_has_result_string() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMValidateRsp::clear_result_string() {
  if (result_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_string_->clear();
  }
  clear_has_result_string();
}
inline const ::std::string& IMValidateRsp::result_string() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMValidateRsp.result_string)
  return *result_string_;
}
inline void IMValidateRsp::set_result_string(const ::std::string& value) {
  set_has_result_string();
  if (result_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_string_ = new ::std::string;
  }
  result_string_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMValidateRsp.result_string)
}
inline void IMValidateRsp::set_result_string(const char* value) {
  set_has_result_string();
  if (result_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_string_ = new ::std::string;
  }
  result_string_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMValidateRsp.result_string)
}
inline void IMValidateRsp::set_result_string(const char* value, size_t size) {
  set_has_result_string();
  if (result_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_string_ = new ::std::string;
  }
  result_string_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMValidateRsp.result_string)
}
inline ::std::string* IMValidateRsp::mutable_result_string() {
  set_has_result_string();
  if (result_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_string_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMValidateRsp.result_string)
  return result_string_;
}
inline ::std::string* IMValidateRsp::release_result_string() {
  clear_has_result_string();
  if (result_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = result_string_;
    result_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMValidateRsp::set_allocated_result_string(::std::string* result_string) {
  if (result_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_string_;
  }
  if (result_string) {
    set_has_result_string();
    result_string_ = result_string;
  } else {
    clear_has_result_string();
    result_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMValidateRsp.result_string)
}

// optional .IM.BaseDefine.UserInfo user_info = 6;
inline bool IMValidateRsp::has_user_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMValidateRsp::set_has_user_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMValidateRsp::clear_has_user_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMValidateRsp::clear_user_info() {
  if (user_info_ != NULL) user_info_->::IM::BaseDefine::UserInfo::Clear();
  clear_has_user_info();
}
inline const ::IM::BaseDefine::UserInfo& IMValidateRsp::user_info() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMValidateRsp.user_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return user_info_ != NULL ? *user_info_ : *default_instance().user_info_;
#else
  return user_info_ != NULL ? *user_info_ : *default_instance_->user_info_;
#endif
}
inline ::IM::BaseDefine::UserInfo* IMValidateRsp::mutable_user_info() {
  set_has_user_info();
  if (user_info_ == NULL) user_info_ = new ::IM::BaseDefine::UserInfo;
  // @@protoc_insertion_point(field_mutable:IM.Server.IMValidateRsp.user_info)
  return user_info_;
}
inline ::IM::BaseDefine::UserInfo* IMValidateRsp::release_user_info() {
  clear_has_user_info();
  ::IM::BaseDefine::UserInfo* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
inline void IMValidateRsp::set_allocated_user_info(::IM::BaseDefine::UserInfo* user_info) {
  delete user_info_;
  user_info_ = user_info;
  if (user_info) {
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMValidateRsp.user_info)
}

// optional bytes attach_data = 20;
inline bool IMValidateRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMValidateRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMValidateRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMValidateRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMValidateRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMValidateRsp.attach_data)
  return *attach_data_;
}
inline void IMValidateRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMValidateRsp.attach_data)
}
inline void IMValidateRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMValidateRsp.attach_data)
}
inline void IMValidateRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMValidateRsp.attach_data)
}
inline ::std::string* IMValidateRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMValidateRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMValidateRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMValidateRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMValidateRsp.attach_data)
}

// -------------------------------------------------------------------

// IMGetDeviceTokenReq

// repeated uint64 user_id = 1;
inline int IMGetDeviceTokenReq::user_id_size() const {
  return user_id_.size();
}
inline void IMGetDeviceTokenReq::clear_user_id() {
  user_id_.Clear();
}
inline ::google::protobuf::uint64 IMGetDeviceTokenReq::user_id(int index) const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGetDeviceTokenReq.user_id)
  return user_id_.Get(index);
}
inline void IMGetDeviceTokenReq::set_user_id(int index, ::google::protobuf::uint64 value) {
  user_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Server.IMGetDeviceTokenReq.user_id)
}
inline void IMGetDeviceTokenReq::add_user_id(::google::protobuf::uint64 value) {
  user_id_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Server.IMGetDeviceTokenReq.user_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
IMGetDeviceTokenReq::user_id() const {
  // @@protoc_insertion_point(field_list:IM.Server.IMGetDeviceTokenReq.user_id)
  return user_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
IMGetDeviceTokenReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable_list:IM.Server.IMGetDeviceTokenReq.user_id)
  return &user_id_;
}

// optional uint32 domain_id = 2 [default = 1000];
inline bool IMGetDeviceTokenReq::has_domain_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGetDeviceTokenReq::set_has_domain_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGetDeviceTokenReq::clear_has_domain_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGetDeviceTokenReq::clear_domain_id() {
  domain_id_ = 1000u;
  clear_has_domain_id();
}
inline ::google::protobuf::uint32 IMGetDeviceTokenReq::domain_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGetDeviceTokenReq.domain_id)
  return domain_id_;
}
inline void IMGetDeviceTokenReq::set_domain_id(::google::protobuf::uint32 value) {
  set_has_domain_id();
  domain_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMGetDeviceTokenReq.domain_id)
}

// optional bytes attach_data = 20;
inline bool IMGetDeviceTokenReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGetDeviceTokenReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGetDeviceTokenReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGetDeviceTokenReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGetDeviceTokenReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGetDeviceTokenReq.attach_data)
  return *attach_data_;
}
inline void IMGetDeviceTokenReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMGetDeviceTokenReq.attach_data)
}
inline void IMGetDeviceTokenReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMGetDeviceTokenReq.attach_data)
}
inline void IMGetDeviceTokenReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMGetDeviceTokenReq.attach_data)
}
inline ::std::string* IMGetDeviceTokenReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMGetDeviceTokenReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMGetDeviceTokenReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGetDeviceTokenReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMGetDeviceTokenReq.attach_data)
}

// -------------------------------------------------------------------

// IMGetDeviceTokenRsp

// repeated .IM.BaseDefine.UserTokenInfo user_token_info = 1;
inline int IMGetDeviceTokenRsp::user_token_info_size() const {
  return user_token_info_.size();
}
inline void IMGetDeviceTokenRsp::clear_user_token_info() {
  user_token_info_.Clear();
}
inline const ::IM::BaseDefine::UserTokenInfo& IMGetDeviceTokenRsp::user_token_info(int index) const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGetDeviceTokenRsp.user_token_info)
  return user_token_info_.Get(index);
}
inline ::IM::BaseDefine::UserTokenInfo* IMGetDeviceTokenRsp::mutable_user_token_info(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Server.IMGetDeviceTokenRsp.user_token_info)
  return user_token_info_.Mutable(index);
}
inline ::IM::BaseDefine::UserTokenInfo* IMGetDeviceTokenRsp::add_user_token_info() {
  // @@protoc_insertion_point(field_add:IM.Server.IMGetDeviceTokenRsp.user_token_info)
  return user_token_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo >&
IMGetDeviceTokenRsp::user_token_info() const {
  // @@protoc_insertion_point(field_list:IM.Server.IMGetDeviceTokenRsp.user_token_info)
  return user_token_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo >*
IMGetDeviceTokenRsp::mutable_user_token_info() {
  // @@protoc_insertion_point(field_mutable_list:IM.Server.IMGetDeviceTokenRsp.user_token_info)
  return &user_token_info_;
}

// optional bytes attach_data = 20;
inline bool IMGetDeviceTokenRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGetDeviceTokenRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGetDeviceTokenRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGetDeviceTokenRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGetDeviceTokenRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGetDeviceTokenRsp.attach_data)
  return *attach_data_;
}
inline void IMGetDeviceTokenRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMGetDeviceTokenRsp.attach_data)
}
inline void IMGetDeviceTokenRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMGetDeviceTokenRsp.attach_data)
}
inline void IMGetDeviceTokenRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMGetDeviceTokenRsp.attach_data)
}
inline ::std::string* IMGetDeviceTokenRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMGetDeviceTokenRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMGetDeviceTokenRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGetDeviceTokenRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMGetDeviceTokenRsp.attach_data)
}

// -------------------------------------------------------------------

// IMRoleSet

// required uint32 master = 1;
inline bool IMRoleSet::has_master() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMRoleSet::set_has_master() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMRoleSet::clear_has_master() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMRoleSet::clear_master() {
  master_ = 0u;
  clear_has_master();
}
inline ::google::protobuf::uint32 IMRoleSet::master() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMRoleSet.master)
  return master_;
}
inline void IMRoleSet::set_master(::google::protobuf::uint32 value) {
  set_has_master();
  master_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMRoleSet.master)
}

// -------------------------------------------------------------------

// IMOnlineUserInfo

// repeated .IM.BaseDefine.ServerUserStat user_stat_list = 1;
inline int IMOnlineUserInfo::user_stat_list_size() const {
  return user_stat_list_.size();
}
inline void IMOnlineUserInfo::clear_user_stat_list() {
  user_stat_list_.Clear();
}
inline const ::IM::BaseDefine::ServerUserStat& IMOnlineUserInfo::user_stat_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Server.IMOnlineUserInfo.user_stat_list)
  return user_stat_list_.Get(index);
}
inline ::IM::BaseDefine::ServerUserStat* IMOnlineUserInfo::mutable_user_stat_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Server.IMOnlineUserInfo.user_stat_list)
  return user_stat_list_.Mutable(index);
}
inline ::IM::BaseDefine::ServerUserStat* IMOnlineUserInfo::add_user_stat_list() {
  // @@protoc_insertion_point(field_add:IM.Server.IMOnlineUserInfo.user_stat_list)
  return user_stat_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::ServerUserStat >&
IMOnlineUserInfo::user_stat_list() const {
  // @@protoc_insertion_point(field_list:IM.Server.IMOnlineUserInfo.user_stat_list)
  return user_stat_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::ServerUserStat >*
IMOnlineUserInfo::mutable_user_stat_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Server.IMOnlineUserInfo.user_stat_list)
  return &user_stat_list_;
}

// -------------------------------------------------------------------

// IMMsgServInfo

// required string ip1 = 1;
inline bool IMMsgServInfo::has_ip1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMMsgServInfo::set_has_ip1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMMsgServInfo::clear_has_ip1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMMsgServInfo::clear_ip1() {
  if (ip1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip1_->clear();
  }
  clear_has_ip1();
}
inline const ::std::string& IMMsgServInfo::ip1() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMMsgServInfo.ip1)
  return *ip1_;
}
inline void IMMsgServInfo::set_ip1(const ::std::string& value) {
  set_has_ip1();
  if (ip1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip1_ = new ::std::string;
  }
  ip1_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMMsgServInfo.ip1)
}
inline void IMMsgServInfo::set_ip1(const char* value) {
  set_has_ip1();
  if (ip1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip1_ = new ::std::string;
  }
  ip1_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMMsgServInfo.ip1)
}
inline void IMMsgServInfo::set_ip1(const char* value, size_t size) {
  set_has_ip1();
  if (ip1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip1_ = new ::std::string;
  }
  ip1_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMMsgServInfo.ip1)
}
inline ::std::string* IMMsgServInfo::mutable_ip1() {
  set_has_ip1();
  if (ip1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip1_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMMsgServInfo.ip1)
  return ip1_;
}
inline ::std::string* IMMsgServInfo::release_ip1() {
  clear_has_ip1();
  if (ip1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip1_;
    ip1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMMsgServInfo::set_allocated_ip1(::std::string* ip1) {
  if (ip1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip1_;
  }
  if (ip1) {
    set_has_ip1();
    ip1_ = ip1;
  } else {
    clear_has_ip1();
    ip1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMMsgServInfo.ip1)
}

// required string ip2 = 2;
inline bool IMMsgServInfo::has_ip2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMMsgServInfo::set_has_ip2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMMsgServInfo::clear_has_ip2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMMsgServInfo::clear_ip2() {
  if (ip2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip2_->clear();
  }
  clear_has_ip2();
}
inline const ::std::string& IMMsgServInfo::ip2() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMMsgServInfo.ip2)
  return *ip2_;
}
inline void IMMsgServInfo::set_ip2(const ::std::string& value) {
  set_has_ip2();
  if (ip2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip2_ = new ::std::string;
  }
  ip2_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMMsgServInfo.ip2)
}
inline void IMMsgServInfo::set_ip2(const char* value) {
  set_has_ip2();
  if (ip2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip2_ = new ::std::string;
  }
  ip2_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMMsgServInfo.ip2)
}
inline void IMMsgServInfo::set_ip2(const char* value, size_t size) {
  set_has_ip2();
  if (ip2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip2_ = new ::std::string;
  }
  ip2_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMMsgServInfo.ip2)
}
inline ::std::string* IMMsgServInfo::mutable_ip2() {
  set_has_ip2();
  if (ip2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip2_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMMsgServInfo.ip2)
  return ip2_;
}
inline ::std::string* IMMsgServInfo::release_ip2() {
  clear_has_ip2();
  if (ip2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip2_;
    ip2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMMsgServInfo::set_allocated_ip2(::std::string* ip2) {
  if (ip2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip2_;
  }
  if (ip2) {
    set_has_ip2();
    ip2_ = ip2;
  } else {
    clear_has_ip2();
    ip2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMMsgServInfo.ip2)
}

// required uint32 port = 3;
inline bool IMMsgServInfo::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMMsgServInfo::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMMsgServInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMMsgServInfo::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IMMsgServInfo::port() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMMsgServInfo.port)
  return port_;
}
inline void IMMsgServInfo::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMMsgServInfo.port)
}

// required uint32 max_conn_cnt = 4;
inline bool IMMsgServInfo::has_max_conn_cnt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMMsgServInfo::set_has_max_conn_cnt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMMsgServInfo::clear_has_max_conn_cnt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMMsgServInfo::clear_max_conn_cnt() {
  max_conn_cnt_ = 0u;
  clear_has_max_conn_cnt();
}
inline ::google::protobuf::uint32 IMMsgServInfo::max_conn_cnt() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMMsgServInfo.max_conn_cnt)
  return max_conn_cnt_;
}
inline void IMMsgServInfo::set_max_conn_cnt(::google::protobuf::uint32 value) {
  set_has_max_conn_cnt();
  max_conn_cnt_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMMsgServInfo.max_conn_cnt)
}

// required uint32 cur_conn_cnt = 5;
inline bool IMMsgServInfo::has_cur_conn_cnt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMMsgServInfo::set_has_cur_conn_cnt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMMsgServInfo::clear_has_cur_conn_cnt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMMsgServInfo::clear_cur_conn_cnt() {
  cur_conn_cnt_ = 0u;
  clear_has_cur_conn_cnt();
}
inline ::google::protobuf::uint32 IMMsgServInfo::cur_conn_cnt() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMMsgServInfo.cur_conn_cnt)
  return cur_conn_cnt_;
}
inline void IMMsgServInfo::set_cur_conn_cnt(::google::protobuf::uint32 value) {
  set_has_cur_conn_cnt();
  cur_conn_cnt_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMMsgServInfo.cur_conn_cnt)
}

// required string host_name = 6;
inline bool IMMsgServInfo::has_host_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMMsgServInfo::set_has_host_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMMsgServInfo::clear_has_host_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMMsgServInfo::clear_host_name() {
  if (host_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_name_->clear();
  }
  clear_has_host_name();
}
inline const ::std::string& IMMsgServInfo::host_name() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMMsgServInfo.host_name)
  return *host_name_;
}
inline void IMMsgServInfo::set_host_name(const ::std::string& value) {
  set_has_host_name();
  if (host_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_name_ = new ::std::string;
  }
  host_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMMsgServInfo.host_name)
}
inline void IMMsgServInfo::set_host_name(const char* value) {
  set_has_host_name();
  if (host_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_name_ = new ::std::string;
  }
  host_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMMsgServInfo.host_name)
}
inline void IMMsgServInfo::set_host_name(const char* value, size_t size) {
  set_has_host_name();
  if (host_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_name_ = new ::std::string;
  }
  host_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMMsgServInfo.host_name)
}
inline ::std::string* IMMsgServInfo::mutable_host_name() {
  set_has_host_name();
  if (host_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMMsgServInfo.host_name)
  return host_name_;
}
inline ::std::string* IMMsgServInfo::release_host_name() {
  clear_has_host_name();
  if (host_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = host_name_;
    host_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMMsgServInfo::set_allocated_host_name(::std::string* host_name) {
  if (host_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete host_name_;
  }
  if (host_name) {
    set_has_host_name();
    host_name_ = host_name;
  } else {
    clear_has_host_name();
    host_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMMsgServInfo.host_name)
}

// required uint32 portWss = 7;
inline bool IMMsgServInfo::has_portwss() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMMsgServInfo::set_has_portwss() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMMsgServInfo::clear_has_portwss() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMMsgServInfo::clear_portwss() {
  portwss_ = 0u;
  clear_has_portwss();
}
inline ::google::protobuf::uint32 IMMsgServInfo::portwss() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMMsgServInfo.portWss)
  return portwss_;
}
inline void IMMsgServInfo::set_portwss(::google::protobuf::uint32 value) {
  set_has_portwss();
  portwss_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMMsgServInfo.portWss)
}

// required string ipWss = 8;
inline bool IMMsgServInfo::has_ipwss() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMMsgServInfo::set_has_ipwss() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMMsgServInfo::clear_has_ipwss() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMMsgServInfo::clear_ipwss() {
  if (ipwss_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipwss_->clear();
  }
  clear_has_ipwss();
}
inline const ::std::string& IMMsgServInfo::ipwss() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMMsgServInfo.ipWss)
  return *ipwss_;
}
inline void IMMsgServInfo::set_ipwss(const ::std::string& value) {
  set_has_ipwss();
  if (ipwss_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipwss_ = new ::std::string;
  }
  ipwss_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMMsgServInfo.ipWss)
}
inline void IMMsgServInfo::set_ipwss(const char* value) {
  set_has_ipwss();
  if (ipwss_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipwss_ = new ::std::string;
  }
  ipwss_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMMsgServInfo.ipWss)
}
inline void IMMsgServInfo::set_ipwss(const char* value, size_t size) {
  set_has_ipwss();
  if (ipwss_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipwss_ = new ::std::string;
  }
  ipwss_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMMsgServInfo.ipWss)
}
inline ::std::string* IMMsgServInfo::mutable_ipwss() {
  set_has_ipwss();
  if (ipwss_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ipwss_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMMsgServInfo.ipWss)
  return ipwss_;
}
inline ::std::string* IMMsgServInfo::release_ipwss() {
  clear_has_ipwss();
  if (ipwss_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ipwss_;
    ipwss_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMMsgServInfo::set_allocated_ipwss(::std::string* ipwss) {
  if (ipwss_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ipwss_;
  }
  if (ipwss) {
    set_has_ipwss();
    ipwss_ = ipwss;
  } else {
    clear_has_ipwss();
    ipwss_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMMsgServInfo.ipWss)
}

// -------------------------------------------------------------------

// IMUserStatusUpdate

// required uint32 user_status = 1;
inline bool IMUserStatusUpdate::has_user_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMUserStatusUpdate::set_has_user_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMUserStatusUpdate::clear_has_user_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMUserStatusUpdate::clear_user_status() {
  user_status_ = 0u;
  clear_has_user_status();
}
inline ::google::protobuf::uint32 IMUserStatusUpdate::user_status() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUserStatusUpdate.user_status)
  return user_status_;
}
inline void IMUserStatusUpdate::set_user_status(::google::protobuf::uint32 value) {
  set_has_user_status();
  user_status_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMUserStatusUpdate.user_status)
}

// required uint64 user_id = 2;
inline bool IMUserStatusUpdate::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMUserStatusUpdate::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMUserStatusUpdate::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMUserStatusUpdate::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 IMUserStatusUpdate::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUserStatusUpdate.user_id)
  return user_id_;
}
inline void IMUserStatusUpdate::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMUserStatusUpdate.user_id)
}

// required uint32 app_id = 3;
inline bool IMUserStatusUpdate::has_app_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMUserStatusUpdate::set_has_app_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMUserStatusUpdate::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMUserStatusUpdate::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
inline ::google::protobuf::uint32 IMUserStatusUpdate::app_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUserStatusUpdate.app_id)
  return app_id_;
}
inline void IMUserStatusUpdate::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMUserStatusUpdate.app_id)
}

// required uint32 domain_id = 4;
inline bool IMUserStatusUpdate::has_domain_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMUserStatusUpdate::set_has_domain_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMUserStatusUpdate::clear_has_domain_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMUserStatusUpdate::clear_domain_id() {
  domain_id_ = 0u;
  clear_has_domain_id();
}
inline ::google::protobuf::uint32 IMUserStatusUpdate::domain_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUserStatusUpdate.domain_id)
  return domain_id_;
}
inline void IMUserStatusUpdate::set_domain_id(::google::protobuf::uint32 value) {
  set_has_domain_id();
  domain_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMUserStatusUpdate.domain_id)
}

// -------------------------------------------------------------------

// IMUserCntUpdate

// required uint32 user_action = 1;
inline bool IMUserCntUpdate::has_user_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMUserCntUpdate::set_has_user_action() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMUserCntUpdate::clear_has_user_action() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMUserCntUpdate::clear_user_action() {
  user_action_ = 0u;
  clear_has_user_action();
}
inline ::google::protobuf::uint32 IMUserCntUpdate::user_action() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUserCntUpdate.user_action)
  return user_action_;
}
inline void IMUserCntUpdate::set_user_action(::google::protobuf::uint32 value) {
  set_has_user_action();
  user_action_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMUserCntUpdate.user_action)
}

// required uint64 user_id = 2;
inline bool IMUserCntUpdate::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMUserCntUpdate::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMUserCntUpdate::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMUserCntUpdate::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 IMUserCntUpdate::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUserCntUpdate.user_id)
  return user_id_;
}
inline void IMUserCntUpdate::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMUserCntUpdate.user_id)
}

// -------------------------------------------------------------------

// IMServerKickUser

// required uint64 user_id = 1;
inline bool IMServerKickUser::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMServerKickUser::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMServerKickUser::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMServerKickUser::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 IMServerKickUser::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMServerKickUser.user_id)
  return user_id_;
}
inline void IMServerKickUser::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMServerKickUser.user_id)
}

// required uint32 app_id = 2;
inline bool IMServerKickUser::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMServerKickUser::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMServerKickUser::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMServerKickUser::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
inline ::google::protobuf::uint32 IMServerKickUser::app_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMServerKickUser.app_id)
  return app_id_;
}
inline void IMServerKickUser::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMServerKickUser.app_id)
}

// required uint32 domain_id = 3;
inline bool IMServerKickUser::has_domain_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMServerKickUser::set_has_domain_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMServerKickUser::clear_has_domain_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMServerKickUser::clear_domain_id() {
  domain_id_ = 0u;
  clear_has_domain_id();
}
inline ::google::protobuf::uint32 IMServerKickUser::domain_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMServerKickUser.domain_id)
  return domain_id_;
}
inline void IMServerKickUser::set_domain_id(::google::protobuf::uint32 value) {
  set_has_domain_id();
  domain_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMServerKickUser.domain_id)
}

// required uint32 reason = 4;
inline bool IMServerKickUser::has_reason() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMServerKickUser::set_has_reason() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMServerKickUser::clear_has_reason() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMServerKickUser::clear_reason() {
  reason_ = 0u;
  clear_has_reason();
}
inline ::google::protobuf::uint32 IMServerKickUser::reason() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMServerKickUser.reason)
  return reason_;
}
inline void IMServerKickUser::set_reason(::google::protobuf::uint32 value) {
  set_has_reason();
  reason_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMServerKickUser.reason)
}

// -------------------------------------------------------------------

// IMServerPCLoginStatusNotify

// required uint64 user_id = 1;
inline bool IMServerPCLoginStatusNotify::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMServerPCLoginStatusNotify::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMServerPCLoginStatusNotify::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMServerPCLoginStatusNotify::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 IMServerPCLoginStatusNotify::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMServerPCLoginStatusNotify.user_id)
  return user_id_;
}
inline void IMServerPCLoginStatusNotify::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMServerPCLoginStatusNotify.user_id)
}

// required uint32 login_status = 2;
inline bool IMServerPCLoginStatusNotify::has_login_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMServerPCLoginStatusNotify::set_has_login_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMServerPCLoginStatusNotify::clear_has_login_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMServerPCLoginStatusNotify::clear_login_status() {
  login_status_ = 0u;
  clear_has_login_status();
}
inline ::google::protobuf::uint32 IMServerPCLoginStatusNotify::login_status() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMServerPCLoginStatusNotify.login_status)
  return login_status_;
}
inline void IMServerPCLoginStatusNotify::set_login_status(::google::protobuf::uint32 value) {
  set_has_login_status();
  login_status_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMServerPCLoginStatusNotify.login_status)
}

// -------------------------------------------------------------------

// IMPushToUserReq

// required string flash = 1;
inline bool IMPushToUserReq::has_flash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMPushToUserReq::set_has_flash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMPushToUserReq::clear_has_flash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMPushToUserReq::clear_flash() {
  if (flash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    flash_->clear();
  }
  clear_has_flash();
}
inline const ::std::string& IMPushToUserReq::flash() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMPushToUserReq.flash)
  return *flash_;
}
inline void IMPushToUserReq::set_flash(const ::std::string& value) {
  set_has_flash();
  if (flash_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    flash_ = new ::std::string;
  }
  flash_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMPushToUserReq.flash)
}
inline void IMPushToUserReq::set_flash(const char* value) {
  set_has_flash();
  if (flash_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    flash_ = new ::std::string;
  }
  flash_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMPushToUserReq.flash)
}
inline void IMPushToUserReq::set_flash(const char* value, size_t size) {
  set_has_flash();
  if (flash_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    flash_ = new ::std::string;
  }
  flash_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMPushToUserReq.flash)
}
inline ::std::string* IMPushToUserReq::mutable_flash() {
  set_has_flash();
  if (flash_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    flash_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMPushToUserReq.flash)
  return flash_;
}
inline ::std::string* IMPushToUserReq::release_flash() {
  clear_has_flash();
  if (flash_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = flash_;
    flash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMPushToUserReq::set_allocated_flash(::std::string* flash) {
  if (flash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete flash_;
  }
  if (flash) {
    set_has_flash();
    flash_ = flash;
  } else {
    clear_has_flash();
    flash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMPushToUserReq.flash)
}

// required string data = 2;
inline bool IMPushToUserReq::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMPushToUserReq::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMPushToUserReq::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMPushToUserReq::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& IMPushToUserReq::data() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMPushToUserReq.data)
  return *data_;
}
inline void IMPushToUserReq::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMPushToUserReq.data)
}
inline void IMPushToUserReq::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMPushToUserReq.data)
}
inline void IMPushToUserReq::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMPushToUserReq.data)
}
inline ::std::string* IMPushToUserReq::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMPushToUserReq.data)
  return data_;
}
inline ::std::string* IMPushToUserReq::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMPushToUserReq::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMPushToUserReq.data)
}

// required uint64 to_session_id = 3;
inline bool IMPushToUserReq::has_to_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMPushToUserReq::set_has_to_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMPushToUserReq::clear_has_to_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMPushToUserReq::clear_to_session_id() {
  to_session_id_ = GOOGLE_ULONGLONG(0);
  clear_has_to_session_id();
}
inline ::google::protobuf::uint64 IMPushToUserReq::to_session_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMPushToUserReq.to_session_id)
  return to_session_id_;
}
inline void IMPushToUserReq::set_to_session_id(::google::protobuf::uint64 value) {
  set_has_to_session_id();
  to_session_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMPushToUserReq.to_session_id)
}

// required .IM.BaseDefine.SessionType session_type = 4;
inline bool IMPushToUserReq::has_session_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMPushToUserReq::set_has_session_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMPushToUserReq::clear_has_session_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMPushToUserReq::clear_session_type() {
  session_type_ = 0;
  clear_has_session_type();
}
inline ::IM::BaseDefine::SessionType IMPushToUserReq::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMPushToUserReq.session_type)
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
inline void IMPushToUserReq::set_session_type(::IM::BaseDefine::SessionType value) {
  assert(::IM::BaseDefine::SessionType_IsValid(value));
  set_has_session_type();
  session_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMPushToUserReq.session_type)
}

// repeated .IM.BaseDefine.UserTokenInfo user_token_list = 5;
inline int IMPushToUserReq::user_token_list_size() const {
  return user_token_list_.size();
}
inline void IMPushToUserReq::clear_user_token_list() {
  user_token_list_.Clear();
}
inline const ::IM::BaseDefine::UserTokenInfo& IMPushToUserReq::user_token_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Server.IMPushToUserReq.user_token_list)
  return user_token_list_.Get(index);
}
inline ::IM::BaseDefine::UserTokenInfo* IMPushToUserReq::mutable_user_token_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Server.IMPushToUserReq.user_token_list)
  return user_token_list_.Mutable(index);
}
inline ::IM::BaseDefine::UserTokenInfo* IMPushToUserReq::add_user_token_list() {
  // @@protoc_insertion_point(field_add:IM.Server.IMPushToUserReq.user_token_list)
  return user_token_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo >&
IMPushToUserReq::user_token_list() const {
  // @@protoc_insertion_point(field_list:IM.Server.IMPushToUserReq.user_token_list)
  return user_token_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo >*
IMPushToUserReq::mutable_user_token_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Server.IMPushToUserReq.user_token_list)
  return &user_token_list_;
}

// -------------------------------------------------------------------

// IMPushToUserRsp

// repeated .IM.BaseDefine.PushResult push_result_list = 1;
inline int IMPushToUserRsp::push_result_list_size() const {
  return push_result_list_.size();
}
inline void IMPushToUserRsp::clear_push_result_list() {
  push_result_list_.Clear();
}
inline const ::IM::BaseDefine::PushResult& IMPushToUserRsp::push_result_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Server.IMPushToUserRsp.push_result_list)
  return push_result_list_.Get(index);
}
inline ::IM::BaseDefine::PushResult* IMPushToUserRsp::mutable_push_result_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Server.IMPushToUserRsp.push_result_list)
  return push_result_list_.Mutable(index);
}
inline ::IM::BaseDefine::PushResult* IMPushToUserRsp::add_push_result_list() {
  // @@protoc_insertion_point(field_add:IM.Server.IMPushToUserRsp.push_result_list)
  return push_result_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::PushResult >&
IMPushToUserRsp::push_result_list() const {
  // @@protoc_insertion_point(field_list:IM.Server.IMPushToUserRsp.push_result_list)
  return push_result_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::PushResult >*
IMPushToUserRsp::mutable_push_result_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Server.IMPushToUserRsp.push_result_list)
  return &push_result_list_;
}

// -------------------------------------------------------------------

// IMGroupGetShieldReq

// required uint32 group_id = 1;
inline bool IMGroupGetShieldReq::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupGetShieldReq::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupGetShieldReq::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupGetShieldReq::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupGetShieldReq::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGroupGetShieldReq.group_id)
  return group_id_;
}
inline void IMGroupGetShieldReq::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMGroupGetShieldReq.group_id)
}

// repeated uint64 user_id = 2;
inline int IMGroupGetShieldReq::user_id_size() const {
  return user_id_.size();
}
inline void IMGroupGetShieldReq::clear_user_id() {
  user_id_.Clear();
}
inline ::google::protobuf::uint64 IMGroupGetShieldReq::user_id(int index) const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGroupGetShieldReq.user_id)
  return user_id_.Get(index);
}
inline void IMGroupGetShieldReq::set_user_id(int index, ::google::protobuf::uint64 value) {
  user_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Server.IMGroupGetShieldReq.user_id)
}
inline void IMGroupGetShieldReq::add_user_id(::google::protobuf::uint64 value) {
  user_id_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Server.IMGroupGetShieldReq.user_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
IMGroupGetShieldReq::user_id() const {
  // @@protoc_insertion_point(field_list:IM.Server.IMGroupGetShieldReq.user_id)
  return user_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
IMGroupGetShieldReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable_list:IM.Server.IMGroupGetShieldReq.user_id)
  return &user_id_;
}

// optional bytes attach_data = 20;
inline bool IMGroupGetShieldReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupGetShieldReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupGetShieldReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupGetShieldReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupGetShieldReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGroupGetShieldReq.attach_data)
  return *attach_data_;
}
inline void IMGroupGetShieldReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMGroupGetShieldReq.attach_data)
}
inline void IMGroupGetShieldReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMGroupGetShieldReq.attach_data)
}
inline void IMGroupGetShieldReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMGroupGetShieldReq.attach_data)
}
inline ::std::string* IMGroupGetShieldReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMGroupGetShieldReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupGetShieldReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupGetShieldReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMGroupGetShieldReq.attach_data)
}

// -------------------------------------------------------------------

// IMGroupGetShieldRsp

// required uint32 group_id = 1;
inline bool IMGroupGetShieldRsp::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGroupGetShieldRsp::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGroupGetShieldRsp::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGroupGetShieldRsp::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 IMGroupGetShieldRsp::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGroupGetShieldRsp.group_id)
  return group_id_;
}
inline void IMGroupGetShieldRsp::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMGroupGetShieldRsp.group_id)
}

// repeated .IM.BaseDefine.ShieldStatus shield_status_list = 2;
inline int IMGroupGetShieldRsp::shield_status_list_size() const {
  return shield_status_list_.size();
}
inline void IMGroupGetShieldRsp::clear_shield_status_list() {
  shield_status_list_.Clear();
}
inline const ::IM::BaseDefine::ShieldStatus& IMGroupGetShieldRsp::shield_status_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGroupGetShieldRsp.shield_status_list)
  return shield_status_list_.Get(index);
}
inline ::IM::BaseDefine::ShieldStatus* IMGroupGetShieldRsp::mutable_shield_status_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Server.IMGroupGetShieldRsp.shield_status_list)
  return shield_status_list_.Mutable(index);
}
inline ::IM::BaseDefine::ShieldStatus* IMGroupGetShieldRsp::add_shield_status_list() {
  // @@protoc_insertion_point(field_add:IM.Server.IMGroupGetShieldRsp.shield_status_list)
  return shield_status_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::ShieldStatus >&
IMGroupGetShieldRsp::shield_status_list() const {
  // @@protoc_insertion_point(field_list:IM.Server.IMGroupGetShieldRsp.shield_status_list)
  return shield_status_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::ShieldStatus >*
IMGroupGetShieldRsp::mutable_shield_status_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Server.IMGroupGetShieldRsp.shield_status_list)
  return &shield_status_list_;
}

// optional bytes attach_data = 20;
inline bool IMGroupGetShieldRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGroupGetShieldRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGroupGetShieldRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGroupGetShieldRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGroupGetShieldRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGroupGetShieldRsp.attach_data)
  return *attach_data_;
}
inline void IMGroupGetShieldRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMGroupGetShieldRsp.attach_data)
}
inline void IMGroupGetShieldRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMGroupGetShieldRsp.attach_data)
}
inline void IMGroupGetShieldRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMGroupGetShieldRsp.attach_data)
}
inline ::std::string* IMGroupGetShieldRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMGroupGetShieldRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMGroupGetShieldRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMGroupGetShieldRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMGroupGetShieldRsp.attach_data)
}

// -------------------------------------------------------------------

// IMFileTransferReq

// required uint64 from_user_id = 1;
inline bool IMFileTransferReq::has_from_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMFileTransferReq::set_has_from_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMFileTransferReq::clear_has_from_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMFileTransferReq::clear_from_user_id() {
  from_user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_from_user_id();
}
inline ::google::protobuf::uint64 IMFileTransferReq::from_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferReq.from_user_id)
  return from_user_id_;
}
inline void IMFileTransferReq::set_from_user_id(::google::protobuf::uint64 value) {
  set_has_from_user_id();
  from_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferReq.from_user_id)
}

// required uint64 to_user_id = 2;
inline bool IMFileTransferReq::has_to_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMFileTransferReq::set_has_to_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMFileTransferReq::clear_has_to_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMFileTransferReq::clear_to_user_id() {
  to_user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_to_user_id();
}
inline ::google::protobuf::uint64 IMFileTransferReq::to_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferReq.to_user_id)
  return to_user_id_;
}
inline void IMFileTransferReq::set_to_user_id(::google::protobuf::uint64 value) {
  set_has_to_user_id();
  to_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferReq.to_user_id)
}

// required string file_name = 3;
inline bool IMFileTransferReq::has_file_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMFileTransferReq::set_has_file_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMFileTransferReq::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMFileTransferReq::clear_file_name() {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_->clear();
  }
  clear_has_file_name();
}
inline const ::std::string& IMFileTransferReq::file_name() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferReq.file_name)
  return *file_name_;
}
inline void IMFileTransferReq::set_file_name(const ::std::string& value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferReq.file_name)
}
inline void IMFileTransferReq::set_file_name(const char* value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMFileTransferReq.file_name)
}
inline void IMFileTransferReq::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMFileTransferReq.file_name)
}
inline ::std::string* IMFileTransferReq::mutable_file_name() {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMFileTransferReq.file_name)
  return file_name_;
}
inline ::std::string* IMFileTransferReq::release_file_name() {
  clear_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = file_name_;
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMFileTransferReq::set_allocated_file_name(::std::string* file_name) {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_name_;
  }
  if (file_name) {
    set_has_file_name();
    file_name_ = file_name;
  } else {
    clear_has_file_name();
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMFileTransferReq.file_name)
}

// required uint32 file_size = 4;
inline bool IMFileTransferReq::has_file_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMFileTransferReq::set_has_file_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMFileTransferReq::clear_has_file_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMFileTransferReq::clear_file_size() {
  file_size_ = 0u;
  clear_has_file_size();
}
inline ::google::protobuf::uint32 IMFileTransferReq::file_size() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferReq.file_size)
  return file_size_;
}
inline void IMFileTransferReq::set_file_size(::google::protobuf::uint32 value) {
  set_has_file_size();
  file_size_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferReq.file_size)
}

// required .IM.BaseDefine.TransferFileType trans_mode = 5;
inline bool IMFileTransferReq::has_trans_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMFileTransferReq::set_has_trans_mode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMFileTransferReq::clear_has_trans_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMFileTransferReq::clear_trans_mode() {
  trans_mode_ = 0;
  clear_has_trans_mode();
}
inline ::IM::BaseDefine::TransferFileType IMFileTransferReq::trans_mode() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferReq.trans_mode)
  return static_cast< ::IM::BaseDefine::TransferFileType >(trans_mode_);
}
inline void IMFileTransferReq::set_trans_mode(::IM::BaseDefine::TransferFileType value) {
  assert(::IM::BaseDefine::TransferFileType_IsValid(value));
  set_has_trans_mode();
  trans_mode_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferReq.trans_mode)
}

// optional bytes attach_data = 20;
inline bool IMFileTransferReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMFileTransferReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMFileTransferReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMFileTransferReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMFileTransferReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferReq.attach_data)
  return *attach_data_;
}
inline void IMFileTransferReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferReq.attach_data)
}
inline void IMFileTransferReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMFileTransferReq.attach_data)
}
inline void IMFileTransferReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMFileTransferReq.attach_data)
}
inline ::std::string* IMFileTransferReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMFileTransferReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMFileTransferReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMFileTransferReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMFileTransferReq.attach_data)
}

// -------------------------------------------------------------------

// IMFileTransferRsp

// required uint32 result_code = 1;
inline bool IMFileTransferRsp::has_result_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMFileTransferRsp::set_has_result_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMFileTransferRsp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMFileTransferRsp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMFileTransferRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferRsp.result_code)
  return result_code_;
}
inline void IMFileTransferRsp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferRsp.result_code)
}

// required uint64 from_user_id = 2;
inline bool IMFileTransferRsp::has_from_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMFileTransferRsp::set_has_from_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMFileTransferRsp::clear_has_from_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMFileTransferRsp::clear_from_user_id() {
  from_user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_from_user_id();
}
inline ::google::protobuf::uint64 IMFileTransferRsp::from_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferRsp.from_user_id)
  return from_user_id_;
}
inline void IMFileTransferRsp::set_from_user_id(::google::protobuf::uint64 value) {
  set_has_from_user_id();
  from_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferRsp.from_user_id)
}

// required uint64 to_user_id = 3;
inline bool IMFileTransferRsp::has_to_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMFileTransferRsp::set_has_to_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMFileTransferRsp::clear_has_to_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMFileTransferRsp::clear_to_user_id() {
  to_user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_to_user_id();
}
inline ::google::protobuf::uint64 IMFileTransferRsp::to_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferRsp.to_user_id)
  return to_user_id_;
}
inline void IMFileTransferRsp::set_to_user_id(::google::protobuf::uint64 value) {
  set_has_to_user_id();
  to_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferRsp.to_user_id)
}

// optional string file_name = 4;
inline bool IMFileTransferRsp::has_file_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMFileTransferRsp::set_has_file_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMFileTransferRsp::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMFileTransferRsp::clear_file_name() {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_->clear();
  }
  clear_has_file_name();
}
inline const ::std::string& IMFileTransferRsp::file_name() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferRsp.file_name)
  return *file_name_;
}
inline void IMFileTransferRsp::set_file_name(const ::std::string& value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferRsp.file_name)
}
inline void IMFileTransferRsp::set_file_name(const char* value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMFileTransferRsp.file_name)
}
inline void IMFileTransferRsp::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMFileTransferRsp.file_name)
}
inline ::std::string* IMFileTransferRsp::mutable_file_name() {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMFileTransferRsp.file_name)
  return file_name_;
}
inline ::std::string* IMFileTransferRsp::release_file_name() {
  clear_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = file_name_;
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMFileTransferRsp::set_allocated_file_name(::std::string* file_name) {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_name_;
  }
  if (file_name) {
    set_has_file_name();
    file_name_ = file_name;
  } else {
    clear_has_file_name();
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMFileTransferRsp.file_name)
}

// optional uint32 file_size = 5;
inline bool IMFileTransferRsp::has_file_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMFileTransferRsp::set_has_file_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMFileTransferRsp::clear_has_file_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMFileTransferRsp::clear_file_size() {
  file_size_ = 0u;
  clear_has_file_size();
}
inline ::google::protobuf::uint32 IMFileTransferRsp::file_size() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferRsp.file_size)
  return file_size_;
}
inline void IMFileTransferRsp::set_file_size(::google::protobuf::uint32 value) {
  set_has_file_size();
  file_size_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferRsp.file_size)
}

// optional string task_id = 6;
inline bool IMFileTransferRsp::has_task_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMFileTransferRsp::set_has_task_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMFileTransferRsp::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMFileTransferRsp::clear_task_id() {
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_->clear();
  }
  clear_has_task_id();
}
inline const ::std::string& IMFileTransferRsp::task_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferRsp.task_id)
  return *task_id_;
}
inline void IMFileTransferRsp::set_task_id(const ::std::string& value) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferRsp.task_id)
}
inline void IMFileTransferRsp::set_task_id(const char* value) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMFileTransferRsp.task_id)
}
inline void IMFileTransferRsp::set_task_id(const char* value, size_t size) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMFileTransferRsp.task_id)
}
inline ::std::string* IMFileTransferRsp::mutable_task_id() {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMFileTransferRsp.task_id)
  return task_id_;
}
inline ::std::string* IMFileTransferRsp::release_task_id() {
  clear_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = task_id_;
    task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMFileTransferRsp::set_allocated_task_id(::std::string* task_id) {
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_id_;
  }
  if (task_id) {
    set_has_task_id();
    task_id_ = task_id;
  } else {
    clear_has_task_id();
    task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMFileTransferRsp.task_id)
}

// optional .IM.BaseDefine.TransferFileType trans_mode = 7;
inline bool IMFileTransferRsp::has_trans_mode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMFileTransferRsp::set_has_trans_mode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMFileTransferRsp::clear_has_trans_mode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMFileTransferRsp::clear_trans_mode() {
  trans_mode_ = 0;
  clear_has_trans_mode();
}
inline ::IM::BaseDefine::TransferFileType IMFileTransferRsp::trans_mode() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferRsp.trans_mode)
  return static_cast< ::IM::BaseDefine::TransferFileType >(trans_mode_);
}
inline void IMFileTransferRsp::set_trans_mode(::IM::BaseDefine::TransferFileType value) {
  assert(::IM::BaseDefine::TransferFileType_IsValid(value));
  set_has_trans_mode();
  trans_mode_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferRsp.trans_mode)
}

// optional bytes attach_data = 20;
inline bool IMFileTransferRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMFileTransferRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMFileTransferRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMFileTransferRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMFileTransferRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferRsp.attach_data)
  return *attach_data_;
}
inline void IMFileTransferRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferRsp.attach_data)
}
inline void IMFileTransferRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMFileTransferRsp.attach_data)
}
inline void IMFileTransferRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMFileTransferRsp.attach_data)
}
inline ::std::string* IMFileTransferRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMFileTransferRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMFileTransferRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMFileTransferRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMFileTransferRsp.attach_data)
}

// -------------------------------------------------------------------

// IMFileServerIPReq

// -------------------------------------------------------------------

// IMFileServerIPRsp

// repeated .IM.BaseDefine.IpAddr ip_addr_list = 1;
inline int IMFileServerIPRsp::ip_addr_list_size() const {
  return ip_addr_list_.size();
}
inline void IMFileServerIPRsp::clear_ip_addr_list() {
  ip_addr_list_.Clear();
}
inline const ::IM::BaseDefine::IpAddr& IMFileServerIPRsp::ip_addr_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileServerIPRsp.ip_addr_list)
  return ip_addr_list_.Get(index);
}
inline ::IM::BaseDefine::IpAddr* IMFileServerIPRsp::mutable_ip_addr_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Server.IMFileServerIPRsp.ip_addr_list)
  return ip_addr_list_.Mutable(index);
}
inline ::IM::BaseDefine::IpAddr* IMFileServerIPRsp::add_ip_addr_list() {
  // @@protoc_insertion_point(field_add:IM.Server.IMFileServerIPRsp.ip_addr_list)
  return ip_addr_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::IpAddr >&
IMFileServerIPRsp::ip_addr_list() const {
  // @@protoc_insertion_point(field_list:IM.Server.IMFileServerIPRsp.ip_addr_list)
  return ip_addr_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::IpAddr >*
IMFileServerIPRsp::mutable_ip_addr_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Server.IMFileServerIPRsp.ip_addr_list)
  return &ip_addr_list_;
}

// -------------------------------------------------------------------

// IMMsgServInfoReq

// required uint32 time_stamp = 1;
inline bool IMMsgServInfoReq::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMMsgServInfoReq::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMMsgServInfoReq::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMMsgServInfoReq::clear_time_stamp() {
  time_stamp_ = 0u;
  clear_has_time_stamp();
}
inline ::google::protobuf::uint32 IMMsgServInfoReq::time_stamp() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMMsgServInfoReq.time_stamp)
  return time_stamp_;
}
inline void IMMsgServInfoReq::set_time_stamp(::google::protobuf::uint32 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMMsgServInfoReq.time_stamp)
}

// -------------------------------------------------------------------

// IMMsgServInfoRsp

// required uint32 time_stamp = 1;
inline bool IMMsgServInfoRsp::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMMsgServInfoRsp::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMMsgServInfoRsp::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMMsgServInfoRsp::clear_time_stamp() {
  time_stamp_ = 0u;
  clear_has_time_stamp();
}
inline ::google::protobuf::uint32 IMMsgServInfoRsp::time_stamp() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMMsgServInfoRsp.time_stamp)
  return time_stamp_;
}
inline void IMMsgServInfoRsp::set_time_stamp(::google::protobuf::uint32 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMMsgServInfoRsp.time_stamp)
}

// required .IM.Server.IMMsgServInfo msg_serv_info = 2;
inline bool IMMsgServInfoRsp::has_msg_serv_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMMsgServInfoRsp::set_has_msg_serv_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMMsgServInfoRsp::clear_has_msg_serv_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMMsgServInfoRsp::clear_msg_serv_info() {
  if (msg_serv_info_ != NULL) msg_serv_info_->::IM::Server::IMMsgServInfo::Clear();
  clear_has_msg_serv_info();
}
inline const ::IM::Server::IMMsgServInfo& IMMsgServInfoRsp::msg_serv_info() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMMsgServInfoRsp.msg_serv_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msg_serv_info_ != NULL ? *msg_serv_info_ : *default_instance().msg_serv_info_;
#else
  return msg_serv_info_ != NULL ? *msg_serv_info_ : *default_instance_->msg_serv_info_;
#endif
}
inline ::IM::Server::IMMsgServInfo* IMMsgServInfoRsp::mutable_msg_serv_info() {
  set_has_msg_serv_info();
  if (msg_serv_info_ == NULL) msg_serv_info_ = new ::IM::Server::IMMsgServInfo;
  // @@protoc_insertion_point(field_mutable:IM.Server.IMMsgServInfoRsp.msg_serv_info)
  return msg_serv_info_;
}
inline ::IM::Server::IMMsgServInfo* IMMsgServInfoRsp::release_msg_serv_info() {
  clear_has_msg_serv_info();
  ::IM::Server::IMMsgServInfo* temp = msg_serv_info_;
  msg_serv_info_ = NULL;
  return temp;
}
inline void IMMsgServInfoRsp::set_allocated_msg_serv_info(::IM::Server::IMMsgServInfo* msg_serv_info) {
  delete msg_serv_info_;
  msg_serv_info_ = msg_serv_info;
  if (msg_serv_info) {
    set_has_msg_serv_info();
  } else {
    clear_has_msg_serv_info();
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMMsgServInfoRsp.msg_serv_info)
}

// -------------------------------------------------------------------

// IMUserLatestNickNameReq

// required uint64 user_id = 1;
inline bool IMUserLatestNickNameReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMUserLatestNickNameReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMUserLatestNickNameReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMUserLatestNickNameReq::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 IMUserLatestNickNameReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUserLatestNickNameReq.user_id)
  return user_id_;
}
inline void IMUserLatestNickNameReq::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMUserLatestNickNameReq.user_id)
}

// required uint32 app_id = 2;
inline bool IMUserLatestNickNameReq::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMUserLatestNickNameReq::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMUserLatestNickNameReq::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMUserLatestNickNameReq::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
inline ::google::protobuf::uint32 IMUserLatestNickNameReq::app_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUserLatestNickNameReq.app_id)
  return app_id_;
}
inline void IMUserLatestNickNameReq::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMUserLatestNickNameReq.app_id)
}

// required uint32 domain_id = 3;
inline bool IMUserLatestNickNameReq::has_domain_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMUserLatestNickNameReq::set_has_domain_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMUserLatestNickNameReq::clear_has_domain_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMUserLatestNickNameReq::clear_domain_id() {
  domain_id_ = 0u;
  clear_has_domain_id();
}
inline ::google::protobuf::uint32 IMUserLatestNickNameReq::domain_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUserLatestNickNameReq.domain_id)
  return domain_id_;
}
inline void IMUserLatestNickNameReq::set_domain_id(::google::protobuf::uint32 value) {
  set_has_domain_id();
  domain_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMUserLatestNickNameReq.domain_id)
}

// optional bytes attach_data = 20;
inline bool IMUserLatestNickNameReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMUserLatestNickNameReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMUserLatestNickNameReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMUserLatestNickNameReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMUserLatestNickNameReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUserLatestNickNameReq.attach_data)
  return *attach_data_;
}
inline void IMUserLatestNickNameReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMUserLatestNickNameReq.attach_data)
}
inline void IMUserLatestNickNameReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMUserLatestNickNameReq.attach_data)
}
inline void IMUserLatestNickNameReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMUserLatestNickNameReq.attach_data)
}
inline ::std::string* IMUserLatestNickNameReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMUserLatestNickNameReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMUserLatestNickNameReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMUserLatestNickNameReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMUserLatestNickNameReq.attach_data)
}

// -------------------------------------------------------------------

// IMUserLatestNickNameRsp

// required uint64 user_id = 1;
inline bool IMUserLatestNickNameRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMUserLatestNickNameRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMUserLatestNickNameRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMUserLatestNickNameRsp::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 IMUserLatestNickNameRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUserLatestNickNameRsp.user_id)
  return user_id_;
}
inline void IMUserLatestNickNameRsp::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMUserLatestNickNameRsp.user_id)
}

// required uint32 app_id = 2;
inline bool IMUserLatestNickNameRsp::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMUserLatestNickNameRsp::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMUserLatestNickNameRsp::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMUserLatestNickNameRsp::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
inline ::google::protobuf::uint32 IMUserLatestNickNameRsp::app_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUserLatestNickNameRsp.app_id)
  return app_id_;
}
inline void IMUserLatestNickNameRsp::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMUserLatestNickNameRsp.app_id)
}

// required uint32 domain_id = 3;
inline bool IMUserLatestNickNameRsp::has_domain_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMUserLatestNickNameRsp::set_has_domain_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMUserLatestNickNameRsp::clear_has_domain_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMUserLatestNickNameRsp::clear_domain_id() {
  domain_id_ = 0u;
  clear_has_domain_id();
}
inline ::google::protobuf::uint32 IMUserLatestNickNameRsp::domain_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUserLatestNickNameRsp.domain_id)
  return domain_id_;
}
inline void IMUserLatestNickNameRsp::set_domain_id(::google::protobuf::uint32 value) {
  set_has_domain_id();
  domain_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMUserLatestNickNameRsp.domain_id)
}

// required string nick_name = 4;
inline bool IMUserLatestNickNameRsp::has_nick_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMUserLatestNickNameRsp::set_has_nick_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMUserLatestNickNameRsp::clear_has_nick_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMUserLatestNickNameRsp::clear_nick_name() {
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_->clear();
  }
  clear_has_nick_name();
}
inline const ::std::string& IMUserLatestNickNameRsp::nick_name() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUserLatestNickNameRsp.nick_name)
  return *nick_name_;
}
inline void IMUserLatestNickNameRsp::set_nick_name(const ::std::string& value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMUserLatestNickNameRsp.nick_name)
}
inline void IMUserLatestNickNameRsp::set_nick_name(const char* value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMUserLatestNickNameRsp.nick_name)
}
inline void IMUserLatestNickNameRsp::set_nick_name(const char* value, size_t size) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMUserLatestNickNameRsp.nick_name)
}
inline ::std::string* IMUserLatestNickNameRsp::mutable_nick_name() {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMUserLatestNickNameRsp.nick_name)
  return nick_name_;
}
inline ::std::string* IMUserLatestNickNameRsp::release_nick_name() {
  clear_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nick_name_;
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMUserLatestNickNameRsp::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nick_name_;
  }
  if (nick_name) {
    set_has_nick_name();
    nick_name_ = nick_name;
  } else {
    clear_has_nick_name();
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMUserLatestNickNameRsp.nick_name)
}

// optional bytes attach_data = 20;
inline bool IMUserLatestNickNameRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMUserLatestNickNameRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMUserLatestNickNameRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMUserLatestNickNameRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMUserLatestNickNameRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUserLatestNickNameRsp.attach_data)
  return *attach_data_;
}
inline void IMUserLatestNickNameRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMUserLatestNickNameRsp.attach_data)
}
inline void IMUserLatestNickNameRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMUserLatestNickNameRsp.attach_data)
}
inline void IMUserLatestNickNameRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMUserLatestNickNameRsp.attach_data)
}
inline ::std::string* IMUserLatestNickNameRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMUserLatestNickNameRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMUserLatestNickNameRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMUserLatestNickNameRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMUserLatestNickNameRsp.attach_data)
}

// -------------------------------------------------------------------

// IMUserNickNameUpdate

// required uint64 user_id = 1;
inline bool IMUserNickNameUpdate::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMUserNickNameUpdate::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMUserNickNameUpdate::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMUserNickNameUpdate::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 IMUserNickNameUpdate::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUserNickNameUpdate.user_id)
  return user_id_;
}
inline void IMUserNickNameUpdate::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMUserNickNameUpdate.user_id)
}

// required uint32 app_id = 2;
inline bool IMUserNickNameUpdate::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMUserNickNameUpdate::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMUserNickNameUpdate::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMUserNickNameUpdate::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
inline ::google::protobuf::uint32 IMUserNickNameUpdate::app_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUserNickNameUpdate.app_id)
  return app_id_;
}
inline void IMUserNickNameUpdate::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMUserNickNameUpdate.app_id)
}

// required uint32 domain_id = 3;
inline bool IMUserNickNameUpdate::has_domain_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMUserNickNameUpdate::set_has_domain_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMUserNickNameUpdate::clear_has_domain_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMUserNickNameUpdate::clear_domain_id() {
  domain_id_ = 0u;
  clear_has_domain_id();
}
inline ::google::protobuf::uint32 IMUserNickNameUpdate::domain_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUserNickNameUpdate.domain_id)
  return domain_id_;
}
inline void IMUserNickNameUpdate::set_domain_id(::google::protobuf::uint32 value) {
  set_has_domain_id();
  domain_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMUserNickNameUpdate.domain_id)
}

// required string nick_name = 4;
inline bool IMUserNickNameUpdate::has_nick_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMUserNickNameUpdate::set_has_nick_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMUserNickNameUpdate::clear_has_nick_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMUserNickNameUpdate::clear_nick_name() {
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_->clear();
  }
  clear_has_nick_name();
}
inline const ::std::string& IMUserNickNameUpdate::nick_name() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUserNickNameUpdate.nick_name)
  return *nick_name_;
}
inline void IMUserNickNameUpdate::set_nick_name(const ::std::string& value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMUserNickNameUpdate.nick_name)
}
inline void IMUserNickNameUpdate::set_nick_name(const char* value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMUserNickNameUpdate.nick_name)
}
inline void IMUserNickNameUpdate::set_nick_name(const char* value, size_t size) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMUserNickNameUpdate.nick_name)
}
inline ::std::string* IMUserNickNameUpdate::mutable_nick_name() {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nick_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMUserNickNameUpdate.nick_name)
  return nick_name_;
}
inline ::std::string* IMUserNickNameUpdate::release_nick_name() {
  clear_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nick_name_;
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMUserNickNameUpdate::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nick_name_;
  }
  if (nick_name) {
    set_has_nick_name();
    nick_name_ = nick_name;
  } else {
    clear_has_nick_name();
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMUserNickNameUpdate.nick_name)
}

// optional bytes attach_data = 20;
inline bool IMUserNickNameUpdate::has_attach_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMUserNickNameUpdate::set_has_attach_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMUserNickNameUpdate::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMUserNickNameUpdate::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMUserNickNameUpdate::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUserNickNameUpdate.attach_data)
  return *attach_data_;
}
inline void IMUserNickNameUpdate::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Server.IMUserNickNameUpdate.attach_data)
}
inline void IMUserNickNameUpdate::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Server.IMUserNickNameUpdate.attach_data)
}
inline void IMUserNickNameUpdate::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMUserNickNameUpdate.attach_data)
}
inline ::std::string* IMUserNickNameUpdate::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMUserNickNameUpdate.attach_data)
  return attach_data_;
}
inline ::std::string* IMUserNickNameUpdate::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMUserNickNameUpdate::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMUserNickNameUpdate.attach_data)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Server
}  // namespace IM

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_IM_2eServer_2eproto__INCLUDED
