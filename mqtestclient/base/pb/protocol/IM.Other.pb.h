// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Other.proto

#ifndef PROTOBUF_IM_2eOther_2eproto__INCLUDED
#define PROTOBUF_IM_2eOther_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "IM.BaseDefine.pb.h"
// @@protoc_insertion_point(includes)

namespace IM {
namespace Other {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_IM_2eOther_2eproto();
void protobuf_AssignDesc_IM_2eOther_2eproto();
void protobuf_ShutdownFile_IM_2eOther_2eproto();

class IMHeartBeat;
class IMCarInfoReq;
class IMCarInfoRep;
class IMMonitStatusReq;
class IMMonitStatusRes;
class IMRobotGetConfigReq;
class IMRobotGetConfigRsp;

// ===================================================================

class IMHeartBeat : public ::google::protobuf::MessageLite {
 public:
  IMHeartBeat();
  virtual ~IMHeartBeat();

  IMHeartBeat(const IMHeartBeat& from);

  inline IMHeartBeat& operator=(const IMHeartBeat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMHeartBeat& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMHeartBeat* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMHeartBeat* other);

  // implements Message ----------------------------------------------

  IMHeartBeat* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMHeartBeat& from);
  void MergeFrom(const IMHeartBeat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IM.Other.IMHeartBeat)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eOther_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eOther_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eOther_2eproto();
  friend void protobuf_ShutdownFile_IM_2eOther_2eproto();

  void InitAsDefaultInstance();
  static IMHeartBeat* default_instance_;
};
// -------------------------------------------------------------------

class IMCarInfoReq : public ::google::protobuf::MessageLite {
 public:
  IMCarInfoReq();
  virtual ~IMCarInfoReq();

  IMCarInfoReq(const IMCarInfoReq& from);

  inline IMCarInfoReq& operator=(const IMCarInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMCarInfoReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMCarInfoReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMCarInfoReq* other);

  // implements Message ----------------------------------------------

  IMCarInfoReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMCarInfoReq& from);
  void MergeFrom(const IMCarInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);

  // optional bytes user_info = 2;
  inline bool has_user_info() const;
  inline void clear_user_info();
  static const int kUserInfoFieldNumber = 2;
  inline const ::std::string& user_info() const;
  inline void set_user_info(const ::std::string& value);
  inline void set_user_info(const char* value);
  inline void set_user_info(const void* value, size_t size);
  inline ::std::string* mutable_user_info();
  inline ::std::string* release_user_info();
  inline void set_allocated_user_info(::std::string* user_info);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Other.IMCarInfoReq)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_user_info();
  inline void clear_has_user_info();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 user_id_;
  ::std::string* user_info_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eOther_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eOther_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eOther_2eproto();
  friend void protobuf_ShutdownFile_IM_2eOther_2eproto();

  void InitAsDefaultInstance();
  static IMCarInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class IMCarInfoRep : public ::google::protobuf::MessageLite {
 public:
  IMCarInfoRep();
  virtual ~IMCarInfoRep();

  IMCarInfoRep(const IMCarInfoRep& from);

  inline IMCarInfoRep& operator=(const IMCarInfoRep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMCarInfoRep& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMCarInfoRep* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMCarInfoRep* other);

  // implements Message ----------------------------------------------

  IMCarInfoRep* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMCarInfoRep& from);
  void MergeFrom(const IMCarInfoRep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .IM.BaseDefine.ResultType result_code = 1;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 1;
  inline ::IM::BaseDefine::ResultType result_code() const;
  inline void set_result_code(::IM::BaseDefine::ResultType value);

  // required uint64 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);

  // optional bytes return_info = 3;
  inline bool has_return_info() const;
  inline void clear_return_info();
  static const int kReturnInfoFieldNumber = 3;
  inline const ::std::string& return_info() const;
  inline void set_return_info(const ::std::string& value);
  inline void set_return_info(const char* value);
  inline void set_return_info(const void* value, size_t size);
  inline ::std::string* mutable_return_info();
  inline ::std::string* release_return_info();
  inline void set_allocated_return_info(::std::string* return_info);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Other.IMCarInfoRep)
 private:
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_return_info();
  inline void clear_has_return_info();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 user_id_;
  ::std::string* return_info_;
  ::std::string* attach_data_;
  int result_code_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eOther_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eOther_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eOther_2eproto();
  friend void protobuf_ShutdownFile_IM_2eOther_2eproto();

  void InitAsDefaultInstance();
  static IMCarInfoRep* default_instance_;
};
// -------------------------------------------------------------------

class IMMonitStatusReq : public ::google::protobuf::MessageLite {
 public:
  IMMonitStatusReq();
  virtual ~IMMonitStatusReq();

  IMMonitStatusReq(const IMMonitStatusReq& from);

  inline IMMonitStatusReq& operator=(const IMMonitStatusReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMMonitStatusReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMMonitStatusReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMMonitStatusReq* other);

  // implements Message ----------------------------------------------

  IMMonitStatusReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMMonitStatusReq& from);
  void MergeFrom(const IMMonitStatusReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IM.Other.IMMonitStatusReq)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eOther_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eOther_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eOther_2eproto();
  friend void protobuf_ShutdownFile_IM_2eOther_2eproto();

  void InitAsDefaultInstance();
  static IMMonitStatusReq* default_instance_;
};
// -------------------------------------------------------------------

class IMMonitStatusRes : public ::google::protobuf::MessageLite {
 public:
  IMMonitStatusRes();
  virtual ~IMMonitStatusRes();

  IMMonitStatusRes(const IMMonitStatusRes& from);

  inline IMMonitStatusRes& operator=(const IMMonitStatusRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMMonitStatusRes& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMMonitStatusRes* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMMonitStatusRes* other);

  // implements Message ----------------------------------------------

  IMMonitStatusRes* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMMonitStatusRes& from);
  void MergeFrom(const IMMonitStatusRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IM.BaseDefine.MonitInfo monit_list = 1;
  inline int monit_list_size() const;
  inline void clear_monit_list();
  static const int kMonitListFieldNumber = 1;
  inline const ::IM::BaseDefine::MonitInfo& monit_list(int index) const;
  inline ::IM::BaseDefine::MonitInfo* mutable_monit_list(int index);
  inline ::IM::BaseDefine::MonitInfo* add_monit_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::MonitInfo >&
      monit_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::MonitInfo >*
      mutable_monit_list();

  // @@protoc_insertion_point(class_scope:IM.Other.IMMonitStatusRes)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::MonitInfo > monit_list_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eOther_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eOther_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eOther_2eproto();
  friend void protobuf_ShutdownFile_IM_2eOther_2eproto();

  void InitAsDefaultInstance();
  static IMMonitStatusRes* default_instance_;
};
// -------------------------------------------------------------------

class IMRobotGetConfigReq : public ::google::protobuf::MessageLite {
 public:
  IMRobotGetConfigReq();
  virtual ~IMRobotGetConfigReq();

  IMRobotGetConfigReq(const IMRobotGetConfigReq& from);

  inline IMRobotGetConfigReq& operator=(const IMRobotGetConfigReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMRobotGetConfigReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMRobotGetConfigReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMRobotGetConfigReq* other);

  // implements Message ----------------------------------------------

  IMRobotGetConfigReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMRobotGetConfigReq& from);
  void MergeFrom(const IMRobotGetConfigReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Other.IMRobotGetConfigReq)
 private:
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eOther_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eOther_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eOther_2eproto();
  friend void protobuf_ShutdownFile_IM_2eOther_2eproto();

  void InitAsDefaultInstance();
  static IMRobotGetConfigReq* default_instance_;
};
// -------------------------------------------------------------------

class IMRobotGetConfigRsp : public ::google::protobuf::MessageLite {
 public:
  IMRobotGetConfigRsp();
  virtual ~IMRobotGetConfigRsp();

  IMRobotGetConfigRsp(const IMRobotGetConfigRsp& from);

  inline IMRobotGetConfigRsp& operator=(const IMRobotGetConfigRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMRobotGetConfigRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMRobotGetConfigRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMRobotGetConfigRsp* other);

  // implements Message ----------------------------------------------

  IMRobotGetConfigRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMRobotGetConfigRsp& from);
  void MergeFrom(const IMRobotGetConfigRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IM.BaseDefine.RobotUserInfo robot_list = 1;
  inline int robot_list_size() const;
  inline void clear_robot_list();
  static const int kRobotListFieldNumber = 1;
  inline const ::IM::BaseDefine::RobotUserInfo& robot_list(int index) const;
  inline ::IM::BaseDefine::RobotUserInfo* mutable_robot_list(int index);
  inline ::IM::BaseDefine::RobotUserInfo* add_robot_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::RobotUserInfo >&
      robot_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::RobotUserInfo >*
      mutable_robot_list();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Other.IMRobotGetConfigRsp)
 private:
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::RobotUserInfo > robot_list_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eOther_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eOther_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eOther_2eproto();
  friend void protobuf_ShutdownFile_IM_2eOther_2eproto();

  void InitAsDefaultInstance();
  static IMRobotGetConfigRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// IMHeartBeat

// -------------------------------------------------------------------

// IMCarInfoReq

// required uint64 user_id = 1;
inline bool IMCarInfoReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMCarInfoReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMCarInfoReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMCarInfoReq::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 IMCarInfoReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Other.IMCarInfoReq.user_id)
  return user_id_;
}
inline void IMCarInfoReq::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Other.IMCarInfoReq.user_id)
}

// optional bytes user_info = 2;
inline bool IMCarInfoReq::has_user_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMCarInfoReq::set_has_user_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMCarInfoReq::clear_has_user_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMCarInfoReq::clear_user_info() {
  if (user_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_info_->clear();
  }
  clear_has_user_info();
}
inline const ::std::string& IMCarInfoReq::user_info() const {
  // @@protoc_insertion_point(field_get:IM.Other.IMCarInfoReq.user_info)
  return *user_info_;
}
inline void IMCarInfoReq::set_user_info(const ::std::string& value) {
  set_has_user_info();
  if (user_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_info_ = new ::std::string;
  }
  user_info_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Other.IMCarInfoReq.user_info)
}
inline void IMCarInfoReq::set_user_info(const char* value) {
  set_has_user_info();
  if (user_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_info_ = new ::std::string;
  }
  user_info_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Other.IMCarInfoReq.user_info)
}
inline void IMCarInfoReq::set_user_info(const void* value, size_t size) {
  set_has_user_info();
  if (user_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_info_ = new ::std::string;
  }
  user_info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Other.IMCarInfoReq.user_info)
}
inline ::std::string* IMCarInfoReq::mutable_user_info() {
  set_has_user_info();
  if (user_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Other.IMCarInfoReq.user_info)
  return user_info_;
}
inline ::std::string* IMCarInfoReq::release_user_info() {
  clear_has_user_info();
  if (user_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_info_;
    user_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMCarInfoReq::set_allocated_user_info(::std::string* user_info) {
  if (user_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_info_;
  }
  if (user_info) {
    set_has_user_info();
    user_info_ = user_info;
  } else {
    clear_has_user_info();
    user_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Other.IMCarInfoReq.user_info)
}

// optional bytes attach_data = 20;
inline bool IMCarInfoReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMCarInfoReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMCarInfoReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMCarInfoReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMCarInfoReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Other.IMCarInfoReq.attach_data)
  return *attach_data_;
}
inline void IMCarInfoReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Other.IMCarInfoReq.attach_data)
}
inline void IMCarInfoReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Other.IMCarInfoReq.attach_data)
}
inline void IMCarInfoReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Other.IMCarInfoReq.attach_data)
}
inline ::std::string* IMCarInfoReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Other.IMCarInfoReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMCarInfoReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMCarInfoReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Other.IMCarInfoReq.attach_data)
}

// -------------------------------------------------------------------

// IMCarInfoRep

// required .IM.BaseDefine.ResultType result_code = 1;
inline bool IMCarInfoRep::has_result_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMCarInfoRep::set_has_result_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMCarInfoRep::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMCarInfoRep::clear_result_code() {
  result_code_ = 0;
  clear_has_result_code();
}
inline ::IM::BaseDefine::ResultType IMCarInfoRep::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Other.IMCarInfoRep.result_code)
  return static_cast< ::IM::BaseDefine::ResultType >(result_code_);
}
inline void IMCarInfoRep::set_result_code(::IM::BaseDefine::ResultType value) {
  assert(::IM::BaseDefine::ResultType_IsValid(value));
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Other.IMCarInfoRep.result_code)
}

// required uint64 user_id = 2;
inline bool IMCarInfoRep::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMCarInfoRep::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMCarInfoRep::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMCarInfoRep::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 IMCarInfoRep::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Other.IMCarInfoRep.user_id)
  return user_id_;
}
inline void IMCarInfoRep::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Other.IMCarInfoRep.user_id)
}

// optional bytes return_info = 3;
inline bool IMCarInfoRep::has_return_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMCarInfoRep::set_has_return_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMCarInfoRep::clear_has_return_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMCarInfoRep::clear_return_info() {
  if (return_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return_info_->clear();
  }
  clear_has_return_info();
}
inline const ::std::string& IMCarInfoRep::return_info() const {
  // @@protoc_insertion_point(field_get:IM.Other.IMCarInfoRep.return_info)
  return *return_info_;
}
inline void IMCarInfoRep::set_return_info(const ::std::string& value) {
  set_has_return_info();
  if (return_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return_info_ = new ::std::string;
  }
  return_info_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Other.IMCarInfoRep.return_info)
}
inline void IMCarInfoRep::set_return_info(const char* value) {
  set_has_return_info();
  if (return_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return_info_ = new ::std::string;
  }
  return_info_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Other.IMCarInfoRep.return_info)
}
inline void IMCarInfoRep::set_return_info(const void* value, size_t size) {
  set_has_return_info();
  if (return_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return_info_ = new ::std::string;
  }
  return_info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Other.IMCarInfoRep.return_info)
}
inline ::std::string* IMCarInfoRep::mutable_return_info() {
  set_has_return_info();
  if (return_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return_info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Other.IMCarInfoRep.return_info)
  return return_info_;
}
inline ::std::string* IMCarInfoRep::release_return_info() {
  clear_has_return_info();
  if (return_info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = return_info_;
    return_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMCarInfoRep::set_allocated_return_info(::std::string* return_info) {
  if (return_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete return_info_;
  }
  if (return_info) {
    set_has_return_info();
    return_info_ = return_info;
  } else {
    clear_has_return_info();
    return_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Other.IMCarInfoRep.return_info)
}

// optional bytes attach_data = 20;
inline bool IMCarInfoRep::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMCarInfoRep::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMCarInfoRep::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMCarInfoRep::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMCarInfoRep::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Other.IMCarInfoRep.attach_data)
  return *attach_data_;
}
inline void IMCarInfoRep::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Other.IMCarInfoRep.attach_data)
}
inline void IMCarInfoRep::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Other.IMCarInfoRep.attach_data)
}
inline void IMCarInfoRep::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Other.IMCarInfoRep.attach_data)
}
inline ::std::string* IMCarInfoRep::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Other.IMCarInfoRep.attach_data)
  return attach_data_;
}
inline ::std::string* IMCarInfoRep::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMCarInfoRep::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Other.IMCarInfoRep.attach_data)
}

// -------------------------------------------------------------------

// IMMonitStatusReq

// -------------------------------------------------------------------

// IMMonitStatusRes

// repeated .IM.BaseDefine.MonitInfo monit_list = 1;
inline int IMMonitStatusRes::monit_list_size() const {
  return monit_list_.size();
}
inline void IMMonitStatusRes::clear_monit_list() {
  monit_list_.Clear();
}
inline const ::IM::BaseDefine::MonitInfo& IMMonitStatusRes::monit_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Other.IMMonitStatusRes.monit_list)
  return monit_list_.Get(index);
}
inline ::IM::BaseDefine::MonitInfo* IMMonitStatusRes::mutable_monit_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Other.IMMonitStatusRes.monit_list)
  return monit_list_.Mutable(index);
}
inline ::IM::BaseDefine::MonitInfo* IMMonitStatusRes::add_monit_list() {
  // @@protoc_insertion_point(field_add:IM.Other.IMMonitStatusRes.monit_list)
  return monit_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::MonitInfo >&
IMMonitStatusRes::monit_list() const {
  // @@protoc_insertion_point(field_list:IM.Other.IMMonitStatusRes.monit_list)
  return monit_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::MonitInfo >*
IMMonitStatusRes::mutable_monit_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Other.IMMonitStatusRes.monit_list)
  return &monit_list_;
}

// -------------------------------------------------------------------

// IMRobotGetConfigReq

// optional bytes attach_data = 20;
inline bool IMRobotGetConfigReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMRobotGetConfigReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMRobotGetConfigReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMRobotGetConfigReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMRobotGetConfigReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Other.IMRobotGetConfigReq.attach_data)
  return *attach_data_;
}
inline void IMRobotGetConfigReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Other.IMRobotGetConfigReq.attach_data)
}
inline void IMRobotGetConfigReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Other.IMRobotGetConfigReq.attach_data)
}
inline void IMRobotGetConfigReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Other.IMRobotGetConfigReq.attach_data)
}
inline ::std::string* IMRobotGetConfigReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Other.IMRobotGetConfigReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMRobotGetConfigReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMRobotGetConfigReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Other.IMRobotGetConfigReq.attach_data)
}

// -------------------------------------------------------------------

// IMRobotGetConfigRsp

// repeated .IM.BaseDefine.RobotUserInfo robot_list = 1;
inline int IMRobotGetConfigRsp::robot_list_size() const {
  return robot_list_.size();
}
inline void IMRobotGetConfigRsp::clear_robot_list() {
  robot_list_.Clear();
}
inline const ::IM::BaseDefine::RobotUserInfo& IMRobotGetConfigRsp::robot_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Other.IMRobotGetConfigRsp.robot_list)
  return robot_list_.Get(index);
}
inline ::IM::BaseDefine::RobotUserInfo* IMRobotGetConfigRsp::mutable_robot_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Other.IMRobotGetConfigRsp.robot_list)
  return robot_list_.Mutable(index);
}
inline ::IM::BaseDefine::RobotUserInfo* IMRobotGetConfigRsp::add_robot_list() {
  // @@protoc_insertion_point(field_add:IM.Other.IMRobotGetConfigRsp.robot_list)
  return robot_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::RobotUserInfo >&
IMRobotGetConfigRsp::robot_list() const {
  // @@protoc_insertion_point(field_list:IM.Other.IMRobotGetConfigRsp.robot_list)
  return robot_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::RobotUserInfo >*
IMRobotGetConfigRsp::mutable_robot_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Other.IMRobotGetConfigRsp.robot_list)
  return &robot_list_;
}

// optional bytes attach_data = 20;
inline bool IMRobotGetConfigRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMRobotGetConfigRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMRobotGetConfigRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMRobotGetConfigRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMRobotGetConfigRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Other.IMRobotGetConfigRsp.attach_data)
  return *attach_data_;
}
inline void IMRobotGetConfigRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Other.IMRobotGetConfigRsp.attach_data)
}
inline void IMRobotGetConfigRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Other.IMRobotGetConfigRsp.attach_data)
}
inline void IMRobotGetConfigRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Other.IMRobotGetConfigRsp.attach_data)
}
inline ::std::string* IMRobotGetConfigRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Other.IMRobotGetConfigRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMRobotGetConfigRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMRobotGetConfigRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Other.IMRobotGetConfigRsp.attach_data)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Other
}  // namespace IM

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_IM_2eOther_2eproto__INCLUDED
