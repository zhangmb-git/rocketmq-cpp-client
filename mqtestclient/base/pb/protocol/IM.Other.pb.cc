// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Other.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IM.Other.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace IM {
namespace Other {

void protobuf_ShutdownFile_IM_2eOther_2eproto() {
  delete IMHeartBeat::default_instance_;
  delete IMCarInfoReq::default_instance_;
  delete IMCarInfoRep::default_instance_;
  delete IMMonitStatusReq::default_instance_;
  delete IMMonitStatusRes::default_instance_;
  delete IMRobotGetConfigReq::default_instance_;
  delete IMRobotGetConfigRsp::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_IM_2eOther_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_IM_2eOther_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::IM::BaseDefine::protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  IMHeartBeat::default_instance_ = new IMHeartBeat();
  IMCarInfoReq::default_instance_ = new IMCarInfoReq();
  IMCarInfoRep::default_instance_ = new IMCarInfoRep();
  IMMonitStatusReq::default_instance_ = new IMMonitStatusReq();
  IMMonitStatusRes::default_instance_ = new IMMonitStatusRes();
  IMRobotGetConfigReq::default_instance_ = new IMRobotGetConfigReq();
  IMRobotGetConfigRsp::default_instance_ = new IMRobotGetConfigRsp();
  IMHeartBeat::default_instance_->InitAsDefaultInstance();
  IMCarInfoReq::default_instance_->InitAsDefaultInstance();
  IMCarInfoRep::default_instance_->InitAsDefaultInstance();
  IMMonitStatusReq::default_instance_->InitAsDefaultInstance();
  IMMonitStatusRes::default_instance_->InitAsDefaultInstance();
  IMRobotGetConfigReq::default_instance_->InitAsDefaultInstance();
  IMRobotGetConfigRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_IM_2eOther_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_IM_2eOther_2eproto_once_);
void protobuf_AddDesc_IM_2eOther_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_IM_2eOther_2eproto_once_,
                 &protobuf_AddDesc_IM_2eOther_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_IM_2eOther_2eproto {
  StaticDescriptorInitializer_IM_2eOther_2eproto() {
    protobuf_AddDesc_IM_2eOther_2eproto();
  }
} static_descriptor_initializer_IM_2eOther_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

IMHeartBeat::IMHeartBeat()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Other.IMHeartBeat)
}

void IMHeartBeat::InitAsDefaultInstance() {
}

IMHeartBeat::IMHeartBeat(const IMHeartBeat& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Other.IMHeartBeat)
}

void IMHeartBeat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMHeartBeat::~IMHeartBeat() {
  // @@protoc_insertion_point(destructor:IM.Other.IMHeartBeat)
  SharedDtor();
}

void IMHeartBeat::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMHeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMHeartBeat& IMHeartBeat::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eOther_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eOther_2eproto();
#endif
  return *default_instance_;
}

IMHeartBeat* IMHeartBeat::default_instance_ = NULL;

IMHeartBeat* IMHeartBeat::New() const {
  return new IMHeartBeat;
}

void IMHeartBeat::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMHeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Other.IMHeartBeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Other.IMHeartBeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Other.IMHeartBeat)
  return false;
#undef DO_
}

void IMHeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Other.IMHeartBeat)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Other.IMHeartBeat)
}

int IMHeartBeat::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMHeartBeat::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMHeartBeat*>(&from));
}

void IMHeartBeat::MergeFrom(const IMHeartBeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMHeartBeat::CopyFrom(const IMHeartBeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMHeartBeat::IsInitialized() const {

  return true;
}

void IMHeartBeat::Swap(IMHeartBeat* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMHeartBeat::GetTypeName() const {
  return "IM.Other.IMHeartBeat";
}


// ===================================================================

#ifndef _MSC_VER
const int IMCarInfoReq::kUserIdFieldNumber;
const int IMCarInfoReq::kUserInfoFieldNumber;
const int IMCarInfoReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMCarInfoReq::IMCarInfoReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Other.IMCarInfoReq)
}

void IMCarInfoReq::InitAsDefaultInstance() {
}

IMCarInfoReq::IMCarInfoReq(const IMCarInfoReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Other.IMCarInfoReq)
}

void IMCarInfoReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  user_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMCarInfoReq::~IMCarInfoReq() {
  // @@protoc_insertion_point(destructor:IM.Other.IMCarInfoReq)
  SharedDtor();
}

void IMCarInfoReq::SharedDtor() {
  if (user_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_info_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMCarInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMCarInfoReq& IMCarInfoReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eOther_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eOther_2eproto();
#endif
  return *default_instance_;
}

IMCarInfoReq* IMCarInfoReq::default_instance_ = NULL;

IMCarInfoReq* IMCarInfoReq::New() const {
  return new IMCarInfoReq;
}

void IMCarInfoReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_user_info()) {
      if (user_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_info_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMCarInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Other.IMCarInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_info;
        break;
      }

      // optional bytes user_info = 2;
      case 2: {
        if (tag == 18) {
         parse_user_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Other.IMCarInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Other.IMCarInfoReq)
  return false;
#undef DO_
}

void IMCarInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Other.IMCarInfoReq)
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional bytes user_info = 2;
  if (has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->user_info(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Other.IMCarInfoReq)
}

int IMCarInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional bytes user_info = 2;
    if (has_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_info());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMCarInfoReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMCarInfoReq*>(&from));
}

void IMCarInfoReq::MergeFrom(const IMCarInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_info()) {
      set_user_info(from.user_info());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMCarInfoReq::CopyFrom(const IMCarInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMCarInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IMCarInfoReq::Swap(IMCarInfoReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(user_info_, other->user_info_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMCarInfoReq::GetTypeName() const {
  return "IM.Other.IMCarInfoReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMCarInfoRep::kResultCodeFieldNumber;
const int IMCarInfoRep::kUserIdFieldNumber;
const int IMCarInfoRep::kReturnInfoFieldNumber;
const int IMCarInfoRep::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMCarInfoRep::IMCarInfoRep()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Other.IMCarInfoRep)
}

void IMCarInfoRep::InitAsDefaultInstance() {
}

IMCarInfoRep::IMCarInfoRep(const IMCarInfoRep& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Other.IMCarInfoRep)
}

void IMCarInfoRep::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_code_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  return_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMCarInfoRep::~IMCarInfoRep() {
  // @@protoc_insertion_point(destructor:IM.Other.IMCarInfoRep)
  SharedDtor();
}

void IMCarInfoRep::SharedDtor() {
  if (return_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete return_info_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMCarInfoRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMCarInfoRep& IMCarInfoRep::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eOther_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eOther_2eproto();
#endif
  return *default_instance_;
}

IMCarInfoRep* IMCarInfoRep::default_instance_ = NULL;

IMCarInfoRep* IMCarInfoRep::New() const {
  return new IMCarInfoRep;
}

void IMCarInfoRep::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    result_code_ = 0;
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_return_info()) {
      if (return_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        return_info_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMCarInfoRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Other.IMCarInfoRep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .IM.BaseDefine.ResultType result_code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::ResultType_IsValid(value)) {
            set_result_code(static_cast< ::IM::BaseDefine::ResultType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint64 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_return_info;
        break;
      }

      // optional bytes return_info = 3;
      case 3: {
        if (tag == 26) {
         parse_return_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_return_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Other.IMCarInfoRep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Other.IMCarInfoRep)
  return false;
#undef DO_
}

void IMCarInfoRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Other.IMCarInfoRep)
  // required .IM.BaseDefine.ResultType result_code = 1;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result_code(), output);
  }

  // required uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional bytes return_info = 3;
  if (has_return_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->return_info(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Other.IMCarInfoRep)
}

int IMCarInfoRep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .IM.BaseDefine.ResultType result_code = 1;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_code());
    }

    // required uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional bytes return_info = 3;
    if (has_return_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->return_info());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMCarInfoRep::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMCarInfoRep*>(&from));
}

void IMCarInfoRep::MergeFrom(const IMCarInfoRep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_return_info()) {
      set_return_info(from.return_info());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMCarInfoRep::CopyFrom(const IMCarInfoRep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMCarInfoRep::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMCarInfoRep::Swap(IMCarInfoRep* other) {
  if (other != this) {
    std::swap(result_code_, other->result_code_);
    std::swap(user_id_, other->user_id_);
    std::swap(return_info_, other->return_info_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMCarInfoRep::GetTypeName() const {
  return "IM.Other.IMCarInfoRep";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

IMMonitStatusReq::IMMonitStatusReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Other.IMMonitStatusReq)
}

void IMMonitStatusReq::InitAsDefaultInstance() {
}

IMMonitStatusReq::IMMonitStatusReq(const IMMonitStatusReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Other.IMMonitStatusReq)
}

void IMMonitStatusReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMMonitStatusReq::~IMMonitStatusReq() {
  // @@protoc_insertion_point(destructor:IM.Other.IMMonitStatusReq)
  SharedDtor();
}

void IMMonitStatusReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMMonitStatusReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMMonitStatusReq& IMMonitStatusReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eOther_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eOther_2eproto();
#endif
  return *default_instance_;
}

IMMonitStatusReq* IMMonitStatusReq::default_instance_ = NULL;

IMMonitStatusReq* IMMonitStatusReq::New() const {
  return new IMMonitStatusReq;
}

void IMMonitStatusReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMMonitStatusReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Other.IMMonitStatusReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Other.IMMonitStatusReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Other.IMMonitStatusReq)
  return false;
#undef DO_
}

void IMMonitStatusReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Other.IMMonitStatusReq)
  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Other.IMMonitStatusReq)
}

int IMMonitStatusReq::ByteSize() const {
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMMonitStatusReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMMonitStatusReq*>(&from));
}

void IMMonitStatusReq::MergeFrom(const IMMonitStatusReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMMonitStatusReq::CopyFrom(const IMMonitStatusReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMMonitStatusReq::IsInitialized() const {

  return true;
}

void IMMonitStatusReq::Swap(IMMonitStatusReq* other) {
  if (other != this) {
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMMonitStatusReq::GetTypeName() const {
  return "IM.Other.IMMonitStatusReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMMonitStatusRes::kMonitListFieldNumber;
#endif  // !_MSC_VER

IMMonitStatusRes::IMMonitStatusRes()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Other.IMMonitStatusRes)
}

void IMMonitStatusRes::InitAsDefaultInstance() {
}

IMMonitStatusRes::IMMonitStatusRes(const IMMonitStatusRes& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Other.IMMonitStatusRes)
}

void IMMonitStatusRes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMMonitStatusRes::~IMMonitStatusRes() {
  // @@protoc_insertion_point(destructor:IM.Other.IMMonitStatusRes)
  SharedDtor();
}

void IMMonitStatusRes::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMMonitStatusRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMMonitStatusRes& IMMonitStatusRes::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eOther_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eOther_2eproto();
#endif
  return *default_instance_;
}

IMMonitStatusRes* IMMonitStatusRes::default_instance_ = NULL;

IMMonitStatusRes* IMMonitStatusRes::New() const {
  return new IMMonitStatusRes;
}

void IMMonitStatusRes::Clear() {
  monit_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMMonitStatusRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Other.IMMonitStatusRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IM.BaseDefine.MonitInfo monit_list = 1;
      case 1: {
        if (tag == 10) {
         parse_monit_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monit_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_monit_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Other.IMMonitStatusRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Other.IMMonitStatusRes)
  return false;
#undef DO_
}

void IMMonitStatusRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Other.IMMonitStatusRes)
  // repeated .IM.BaseDefine.MonitInfo monit_list = 1;
  for (int i = 0; i < this->monit_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->monit_list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Other.IMMonitStatusRes)
}

int IMMonitStatusRes::ByteSize() const {
  int total_size = 0;

  // repeated .IM.BaseDefine.MonitInfo monit_list = 1;
  total_size += 1 * this->monit_list_size();
  for (int i = 0; i < this->monit_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monit_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMMonitStatusRes::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMMonitStatusRes*>(&from));
}

void IMMonitStatusRes::MergeFrom(const IMMonitStatusRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  monit_list_.MergeFrom(from.monit_list_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMMonitStatusRes::CopyFrom(const IMMonitStatusRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMMonitStatusRes::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->monit_list())) return false;
  return true;
}

void IMMonitStatusRes::Swap(IMMonitStatusRes* other) {
  if (other != this) {
    monit_list_.Swap(&other->monit_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMMonitStatusRes::GetTypeName() const {
  return "IM.Other.IMMonitStatusRes";
}


// ===================================================================

#ifndef _MSC_VER
const int IMRobotGetConfigReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMRobotGetConfigReq::IMRobotGetConfigReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Other.IMRobotGetConfigReq)
}

void IMRobotGetConfigReq::InitAsDefaultInstance() {
}

IMRobotGetConfigReq::IMRobotGetConfigReq(const IMRobotGetConfigReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Other.IMRobotGetConfigReq)
}

void IMRobotGetConfigReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMRobotGetConfigReq::~IMRobotGetConfigReq() {
  // @@protoc_insertion_point(destructor:IM.Other.IMRobotGetConfigReq)
  SharedDtor();
}

void IMRobotGetConfigReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMRobotGetConfigReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMRobotGetConfigReq& IMRobotGetConfigReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eOther_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eOther_2eproto();
#endif
  return *default_instance_;
}

IMRobotGetConfigReq* IMRobotGetConfigReq::default_instance_ = NULL;

IMRobotGetConfigReq* IMRobotGetConfigReq::New() const {
  return new IMRobotGetConfigReq;
}

void IMRobotGetConfigReq::Clear() {
  if (has_attach_data()) {
    if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      attach_data_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMRobotGetConfigReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Other.IMRobotGetConfigReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Other.IMRobotGetConfigReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Other.IMRobotGetConfigReq)
  return false;
#undef DO_
}

void IMRobotGetConfigReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Other.IMRobotGetConfigReq)
  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Other.IMRobotGetConfigReq)
}

int IMRobotGetConfigReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMRobotGetConfigReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMRobotGetConfigReq*>(&from));
}

void IMRobotGetConfigReq::MergeFrom(const IMRobotGetConfigReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMRobotGetConfigReq::CopyFrom(const IMRobotGetConfigReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMRobotGetConfigReq::IsInitialized() const {

  return true;
}

void IMRobotGetConfigReq::Swap(IMRobotGetConfigReq* other) {
  if (other != this) {
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMRobotGetConfigReq::GetTypeName() const {
  return "IM.Other.IMRobotGetConfigReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMRobotGetConfigRsp::kRobotListFieldNumber;
const int IMRobotGetConfigRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMRobotGetConfigRsp::IMRobotGetConfigRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Other.IMRobotGetConfigRsp)
}

void IMRobotGetConfigRsp::InitAsDefaultInstance() {
}

IMRobotGetConfigRsp::IMRobotGetConfigRsp(const IMRobotGetConfigRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Other.IMRobotGetConfigRsp)
}

void IMRobotGetConfigRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMRobotGetConfigRsp::~IMRobotGetConfigRsp() {
  // @@protoc_insertion_point(destructor:IM.Other.IMRobotGetConfigRsp)
  SharedDtor();
}

void IMRobotGetConfigRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMRobotGetConfigRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMRobotGetConfigRsp& IMRobotGetConfigRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eOther_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eOther_2eproto();
#endif
  return *default_instance_;
}

IMRobotGetConfigRsp* IMRobotGetConfigRsp::default_instance_ = NULL;

IMRobotGetConfigRsp* IMRobotGetConfigRsp::New() const {
  return new IMRobotGetConfigRsp;
}

void IMRobotGetConfigRsp::Clear() {
  if (has_attach_data()) {
    if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      attach_data_->clear();
    }
  }
  robot_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMRobotGetConfigRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Other.IMRobotGetConfigRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IM.BaseDefine.RobotUserInfo robot_list = 1;
      case 1: {
        if (tag == 10) {
         parse_robot_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_robot_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_robot_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Other.IMRobotGetConfigRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Other.IMRobotGetConfigRsp)
  return false;
#undef DO_
}

void IMRobotGetConfigRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Other.IMRobotGetConfigRsp)
  // repeated .IM.BaseDefine.RobotUserInfo robot_list = 1;
  for (int i = 0; i < this->robot_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->robot_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Other.IMRobotGetConfigRsp)
}

int IMRobotGetConfigRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.BaseDefine.RobotUserInfo robot_list = 1;
  total_size += 1 * this->robot_list_size();
  for (int i = 0; i < this->robot_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->robot_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMRobotGetConfigRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMRobotGetConfigRsp*>(&from));
}

void IMRobotGetConfigRsp::MergeFrom(const IMRobotGetConfigRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  robot_list_.MergeFrom(from.robot_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMRobotGetConfigRsp::CopyFrom(const IMRobotGetConfigRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMRobotGetConfigRsp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->robot_list())) return false;
  return true;
}

void IMRobotGetConfigRsp::Swap(IMRobotGetConfigRsp* other) {
  if (other != this) {
    robot_list_.Swap(&other->robot_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMRobotGetConfigRsp::GetTypeName() const {
  return "IM.Other.IMRobotGetConfigRsp";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Other
}  // namespace IM

// @@protoc_insertion_point(global_scope)
